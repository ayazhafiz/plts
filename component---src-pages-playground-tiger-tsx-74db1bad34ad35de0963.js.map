{"version":3,"file":"component---src-pages-playground-tiger-tsx-74db1bad34ad35de0963.js","mappings":"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","sources":["webpack://www/./src/common/syntax/asm.ts","webpack://www/./src/pages/playground/tiger.tsx"],"sourcesContent":["// Stolen from:\n// https://github.com/compiler-explorer/compiler-explorer/blob/9904a6ee51f765e9d37c7df9ee543ad834f51239/static/modes/asm-mode.ts\n//\n// Copyright (c) 2012, Compiler Explorer Authors\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//     * Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport type * as monaco from 'monaco-editor';\n\nexport const ASM_SYNTAX: monaco.languages.IMonarchLanguage = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n\n    // C# style strings\n    escapes:\n        /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n    registers:\n        /%?\\b(r[0-9]+[dbw]?|([er]?([abcd][xhl]|cs|fs|ds|ss|sp|bp|ip|sil?|dil?))|[xyz]mm[0-9]+|sp|fp|lr)\\b/,\n\n    intelOperators: /PTR|(D|Q|[XYZ]MM)?WORD/,\n\n    tokenizer: {\n        root: [\n            // Error document\n            [/^<.*>$/, {token: 'annotation'}],\n            // Label definition\n            [/^[.a-zA-Z0-9_$?@].*:/, {token: 'type.identifier'}],\n            // Label definition (quoted)\n            [/^\"([^\"\\\\]|\\\\.)*\":/, {token: 'type.identifier'}],\n            // Label definition (ARM style)\n            [/^\\s*[|][^|]*[|]/, {token: 'type.identifier'}],\n            // Label definition (CL style)\n            [\n                /^\\s*[.a-zA-Z0-9_$|]*\\s+(PROC|ENDP|DB|DD)/,\n                {token: 'type.identifier'}\n            ],\n            // Constant definition\n            [/^[.a-zA-Z0-9_$?@][^=]*=/, {token: 'type.identifier'}],\n            // opcode\n            [/[.a-zA-Z_][.a-zA-Z_0-9]*/, {token: 'keyword', next: '@rest'}],\n            // braces and parentheses at the start of the line (e.g. nvcc\n            // output)\n            [/[(){}]/, {token: 'operator', next: '@rest'}],\n\n            // whitespace\n            {include: '@whitespace'},\n        ],\n\n        rest: [\n            // pop at the beginning of the next line and rematch\n            [/^.*$/, {token: '@rematch', next: '@pop'}],\n\n            [/@registers/, 'variable.predefined'],\n            [/@intelOperators/, 'annotation'],\n            // brackets\n            [/[{}<>()[\\]]/, '@brackets'],\n\n            // ARM-style label reference\n            [/[|][^|]*[|]*/, 'type.identifier'],\n\n            // numbers\n            [/\\d*\\.\\d+([eE][-+]?\\d+)?/, 'number.float'],\n            [/([$]|0[xX])[0-9a-fA-F]+/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // ARM-style immediate numbers (which otherwise look like\n            // comments)\n            [/#-?\\d+/, 'number'],\n\n            // operators\n            [/[-+,*/!:&{}()]/, 'operator'],\n\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],  // non-terminated string\n            [/\"/, {token: 'string.quote', bracket: '@open', next: '@string'}],\n\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid'],\n\n            // Assume anything else is a label reference\n            [/%?[.?_$a-zA-Z@][.?_$a-zA-Z0-9@]*/, 'type.identifier'],\n\n            // whitespace\n            {include: '@whitespace'},\n        ],\n\n        comment: [\n            [/[^/*]+/, 'comment'],\n            [/\\/\\*/, 'comment', '@push'],  // nested comment\n            ['\\\\*/', 'comment', '@pop'],\n            [/[/*]/, 'comment'],\n        ],\n\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, {token: 'string.quote', bracket: '@close', next: '@pop'}],\n        ],\n\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n            [/[#;\\\\@].*$/, 'comment'],\n        ],\n    },\n};\n","import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"../../components/playground\";\nimport type { Backend } from \"../../common/types\";\nimport { promisify } from \"../../common/util\";\nimport * as tiger from \"tiger\";\nimport { ASM_SYNTAX } from \"../../common/syntax/asm\";\n\nconst examples = {\n  \"Eight Queens\": `\nlet\n  var N := 8\n\n  type intArray = array of int\n\n  var row := intArray [ N ] of 0\n  var col := intArray [ N ] of 0\n  var diag1 := intArray [N+N-1] of 0\n  var diag2 := intArray [N+N-1] of 0\n\n  function printboard() =\n    (for i := 0 to N-1 do\n     (for j := 0 to N-1 do\n        print(if col[i]=j then \" O\" else \" .\");\n        print(\"\\\\n\"));\n      print(\"\\\\n\"))\n\n  function try(c:int) = (\n    if c=N\n    then printboard()\n    else for r := 0 to N-1 do\n      if row[r]=0 & diag1[r+c]=0 & diag2[r+7-c]=0\n          then (\n            row[r]:=1;\n            diag1[r+c]:=1;\n            diag2[r+7-c]:=1;\n            col[c]:=r;\n            try(c+1);\n            row[r]:=0;\n            diag1[r+c]:=0;\n            diag2[r+7-c]:=0 ) )\nin\n  try(0);\n  0\nend\n`.trim(),\n};\n\nconst backends: {\n  [K in \"Compiler IR\" | \"X86 Assembly\"]: [Backend];\n} = {\n  \"Compiler IR\": [\n    {\n      title: \"Compiler IR\",\n      do: promisify(tiger.compileIR),\n      options: [],\n      editorLanguage: \"tiger\",\n    },\n  ],\n  \"X86 Assembly\": [\n    {\n      title: \"X86 Assembly\",\n      do: promisify(tiger.compileX86),\n      options: [],\n      editorLanguage: \"asm\",\n    },\n  ],\n};\n\nconst tigerSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  builtin_types: [\"nat\", \"bool\", \"?\", \"_\"],\n  keywords: [\n    \"if\",\n    \"then\",\n    \"else\",\n    \"for\",\n    \"to\",\n    \"while\",\n    \"do\",\n    \"type\",\n    \"function\",\n    \"var\",\n    \"break\",\n    \"let\",\n    \"in\",\n    \"end\",\n    \"array\",\n    \"of\",\n    \"nil\",\n    \"int\",\n    \"string\",\n    \"print\",\n    \"flush\",\n    \"get_char\",\n    \"ord\",\n    \"chr\",\n    \"size\",\n    \"substring\",\n    \"concat\",\n    \"not\",\n    \"exit\",\n  ],\n  operators: [\":=\", \"+\", \"-\", \"*\", \"/\", \"|\", \"&\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n  tokenizer: {\n    root: [\n      [/(Syntax error.*)/, \"error\"],\n      [/(Parse error.*)/, \"error\"],\n      [\n        /[a-zA-Z_][a-zA-Z_0-9\\w$]*/,\n        {\n          cases: {\n            \"@builtin_types\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n\n      // identifiers and keywords\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: { \"@builtin_types\": \"keyword\", \"@keywords\": \"keyword\", \"@default\": \"identifier\" },\n        },\n      ],\n\n      // whitespace\n      { include: \"@whitespace\" },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"\" } }],\n\n      // numbers\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"], // non-teminated string\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n\n      // characters\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"],\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"], // nested comment\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"],\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"],\n    ],\n  },\n};\n\nconst languages = {\n  tiger: {\n    syntax: tigerSyntax,\n  },\n  asm: {\n    syntax: ASM_SYNTAX,\n  },\n};\n\nconst FtPlayground = () => (\n  <Playground\n    title=\"Tiger Playground\"\n    language=\"tiger\"\n    source=\"https://github.com/ayazhafiz/tiger\"\n    grammar=\"https://github.com/ayazhafiz/tiger/blob/base/lib/front/parser.mly\"\n    languageRegistrations={languages}\n    backends={backends}\n    defaultBackend=\"X86 Assembly\"\n    examples={examples}\n    defaultExample=\"Eight Queens\"\n  />\n);\nexport default FtPlayground;\n"],"names":["ASM_SYNTAX","defaultToken","escapes","registers","intelOperators","tokenizer","root","token","next","include","rest","bracket","comment","string","whitespace","examples","trim","backends","title","do","promisify","tiger","options","editorLanguage","languages","syntax","builtin_types","keywords","operators","symbols","cases","asm","language","source","grammar","languageRegistrations","defaultBackend","defaultExample"],"sourceRoot":""}