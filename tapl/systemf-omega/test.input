Nat;
one: Nat;
two: Nat;
lam X. lam x: X. x;
(lam X. lam x:X. x) [All X.X->X];
((lam X. lam x:X. x) [All X.X->X]) (lam Y. lam y: Y. y) [Nat] (one);

Pair :: * => * => *;
onetwo: Pair Nat Nat;
/* pair ID: returns a pair */
(lam F. lam S. lam pair: Pair F S. pair) [Nat] [Nat] onetwo;
/* Creates a pair given first, second.
   Returns a closure to which an "extract" function can be applied. */
lam F. lam S. lam fst: F. lam snd: S.
  lam Res. lam extract: F->S->Res. extract fst snd;

/* Extract first of pair */
lam F. lam S. lam extract: All Res. (F->S->Res) -> Res.
     extract [F] (lam f: F. lam s: S. f);

(lam F. lam S. lam extract: All Res. (F->S->Res) -> Res.
     extract [F] (lam f: F. lam s: S. f)) [Nat] [Nat] /* fst */
     ((lam F. lam S. lam fst: F. lam snd: S.
           lam Res. lam extract: F->S->Res. extract fst snd)
      [Nat] [Nat] one two); /* pair (one, two) */
