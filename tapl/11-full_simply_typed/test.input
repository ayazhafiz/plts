"hello";
unit;

timesfloat 2.0 3.14159;

succ (succ 0);
succ (pred 0);
pred (succ 0);

{x=true, y=false}; 
{x=true, y=false}.x;
{true, false}; 
{true, false}.1; 

lambda x:<a:Bool,b:Bool>. x;
lambda x:A. x;

lambda x:Nat. succ x;
(lambda x:Nat. succ (succ x)) (succ 0); 

s: Bool;
((lambda x: Bool->Bool.
   (lambda y: Bool. (x)(y))) (lambda z: Bool. s)) (true);

y = inert[F];
(lambda x: F. x)(y);

T = Nat->Nat;
lambda f:T. lambda x:Nat. f (f x);

let x=true in x;

letrec plus: Nat->Nat->Nat = lambda m:Nat. lambda n:Nat.
  if iszero m then n else succ (plus (pred m) n)
  in plus 5 10;

let plus = fix (lambda plus: Nat->Nat->Nat. lambda m:Nat. lambda n:Nat.
  if iszero m then n else succ (plus (pred m) n))
  in plus 5 10;

Cat = {noise: String};
Dog = {noise: String};
Animal = <dog: Dog, cat: Cat>;
let myAnimal = (<cat = {noise="meow"}> as Animal) in
case myAnimal of
    <cat=kitty> ==> kitty.noise
  | <dog=puppy> ==> puppy.noise;

/* let diverge = (lambda _:Unit. fix (lambda x: Nat. x)) in diverge unit; */

numeric = letrec ieio: { iseven: Nat->Bool, isodd: Nat->Bool } =
  { iseven = lambda x: Nat.
      if (iszero x) then true
      else ieio.isodd (pred x),

    isodd = lambda x: Nat.
      if (iszero x) then false
      else ieio.iseven (pred x) }
  in ieio;

numeric.iseven 182;
numeric.isodd 183;

nil[Nat];
isnil (cons "a" (cons "b" nil[String]));
isnil (tail (cons "b" nil[String]));
let lst = (cons "a" (cons "b" nil[String]))
  in {hd=(head lst), tl=(tail lst)};

let a = 1.0 in let b = 2.0 in plusfloat a b;

FloatMap = Float -> Float;
FloatList = [Float];

mapFloat = letrec recur: FloatMap -> FloatList -> FloatList =
  lambda map: FloatMap.
  lambda lst: FloatList.
    if (isnil lst) then nil[Float]
    else cons (map (head lst)) (recur map (tail lst))
  in recur;

/* reduceFloat f(accumulator, current) -> Float, initial, list */
reduceFloat = letrec reduce: (Float -> Float -> Float) -> Float -> FloatList -> Float =
  lambda acc: Float -> Float -> Float.
  lambda init: Float.
  lambda lst: FloatList.
    if (isnil lst) then init
    else acc (reduce acc init (tail lst)) (head lst)
  in reduce;

"Sum of double([4, 3, 2, 1]) = Sum([8, 6, 4, 2]) =";

let double = mapFloat (lambda f: Float. timesfloat f 2.0) in
let sum = reduceFloat (lambda acc: Float. lambda cur: Float. plusfloat acc cur) 0.0 in
  sum (double (cons 4.0 (cons 3.0 (cons 2.0 (cons 1.0 nil[Float])))));
