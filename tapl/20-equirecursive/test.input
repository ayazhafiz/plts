NatList = Rec X. <nil: Unit, cons: {Nat, X}>;

nil = <nil=unit> as NatList;

cons = lambda n: Nat.
       lambda lst: NatList.
         <cons={n, lst}> as NatList;

isnil = lambda lst: NatList.
          case lst of
              <nil=u>  ==> true
            | <cons=r> ==> false;

head = lambda lst: NatList.
         case lst of
             /* Ideally raise an error here */
             <nil=u>  ==> 0
           | <cons=r> ==> r.1;

tail = lambda lst: NatList.
         (case lst of
              /* Ideally raise an error here */
              <nil=u>  ==> lst
            | <cons=r> ==> r.2 ) as NatList;

plus = letrec plus: Nat -> Nat -> Nat =
         lambda m:Nat.
         lambda n:Nat.
           if iszero m then n else succ (plus (pred m) n)
  in plus;

sumlst = letrec sum: NatList -> Nat =
           lambda lst: NatList.
             if isnil lst
               then 0
               else plus (head lst) (sum (tail lst))
  in sum;

sumlst (cons 4 (cons 3 (cons 2 (cons 1 nil))));

/* NatSink describes a type that continuously consumes Nats. */
NatSink = Rec X. Nat -> X; 

/* blackHole is a value providing the `NatSink` type. */
blackHole = letrec sink: Nat -> NatSink =
            lambda n: Nat. sink
  in sink as NatSink;

(blackHole 0 1 2 3 4 5 6 7) as NatSink;

/* Stream describes a generator for Nats. */
Stream = Rec X. Unit -> {Nat, X};

/* val retrieves the present value of a stream. */
val = lambda s: Stream. (s unit).1;

/* next retrieves the next generator of a stream. */
next = lambda s: Stream. ((s unit).2) as Stream;

counter = letrec counter: Nat -> Stream =
          lambda n: Nat.
          lambda _: Unit. /* thunk this baby */
            {n, counter (succ n)}
  in counter as Nat -> Stream;

val (next (next (next (counter 5))));

fibonacci = letrec fib: Nat -> Nat -> Stream =
            lambda last2: Nat.
            lambda last1: Nat.
            lambda _: Unit.
              {last1, fib last1 (plus last1 last2)}
  in (fib 0 1) as Stream;

val fibonacci;
val (next fibonacci);
val (next (next fibonacci));
val (next (next (next fibonacci)));
val (next (next (next (next fibonacci))));
val (next (next (next (next (next fibonacci)))));
val (next (next (next (next (next (next fibonacci))))));

/*
  Process describes a type that receives messages and emits values.
  It's like a stream, but ~interactive~
*/
Process = Rec X. Nat -> {Nat, X};

curr = lambda p: Process. (p 0).1;
send = lambda n: Nat.
       lambda p: Process. ((p n).2) as Process;

adder = letrec adder: Nat -> Process =
        lambda total: Nat.
        lambda n: Nat.
          let total' = plus total n in
          {total', adder total'}
  in (adder 0) as Process; /* type annotation not needed; just to make the emit pretty */

curr (send 1 (send 2 (send 3 (send 4 adder))));

/* Recursive subtyping */
DeepString = Rec S. <base: {val: String}, link: S>;

findString = letrec search: DeepString -> String =
             lambda s: DeepString.
               case s of
                   <base=b> ==> b.val
                 | <link=s> ==> search s
  in search;

DeepNumberedString = Rec D. <base: {val: String, num: Nat}, link: D>;

makeDeepNumberedString = lambda s: String.
                         lambda n: Nat.
                           <base={val=s, num=n}> as DeepNumberedString;

findString <base={val="a", num=1}>;
findString (makeDeepNumberedString "a" 1);
