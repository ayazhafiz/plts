lambda x. x;

lambda z. z 1;

plus = letrec plus =
  lambda m.
  lambda n.
    if iszero m
    then n
    else succ (plus (pred m) n)
  in plus;

not = lambda b. if b then false else true;

let twice = lambda f. lambda a. f(f(a)) in
  let three = twice (plus 1) 1 in
  let fls = twice (lambda n. n) false in
  if (not fls) then three else 1;

adder = let r = ref (lambda x. x)
  in (r := (lambda x. succ x); r);
(!adder)50;

let read = lambda x. x.a in
  let num = read {a=3, b=1} in
  read {a="abcdef", n=num};

let r = lambda a. a.a in r ({a=1,b=2,c=3} as {a:Nat,b:Nat});

getNoise = lambda animal.
             case animal of
                 <dog=d> ==> d.noise
               | <cat=c> ==> c.noise
               | <whale=w> ==> w.noise;

getNoise (<cat={noise="meow"}> as
          <cat:{noise:String}, dog:{noise:String}, whale:{noise:String}>);
getNoise;

cell_fib = ref (lambda n. 0);
cell_fib := (
  lambda n.
    if iszero n then 0
    else if iszero (pred n) then n
    else plus ((!cell_fib) (pred n)) ((!cell_fib) (pred (pred n)))
);
fib = !cell_fib;

/* Oh, and type annotations still work too. You can mix annotated/unannotated, if you like :p */
addOrTimes = lambda m.
             lambda n: Float.
             lambda doAdd.
               if doAdd then (plusfloat m n) else (timesfloat m n);

addOrTimes 5.0 6.0 false;

/* Recursive types, too */
c50 = letrec counter =
        lambda n.
        lambda _: Unit.
          {n, counter (succ n)}
  in counter 50;

(c50 unit).1;
((c50 unit).2 unit).1;
(((c50 unit).2 unit).2 unit).1;

/* Watch this take forever to typecheck (why? too many constraints!)
explode =
  let f0 = lambda x. {x, x} in
    let f1 = lambda x. f0(f0(x)) in
      let f2 = lambda x. f1(f1(x)) in
        let f3 = lambda x. f2(f2(x)) in
          let f4 = lambda x. f3(f3(x)) in
            let f5 = lambda x. f4(f4(x)) in
              f5 (lambda x. x);
explode 0;
explode; /* watch the types collapse! */
*/
