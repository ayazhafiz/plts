{"version":3,"file":"component---src-pages-playground-co-lc-tsx-dca8e7e61310c67828ad.js","mappings":"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","sources":["webpack://www/./src/pages/playground/co_lc.tsx"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"../../components/playground\";\nimport type {\n  Backend,\n  BackendKind,\n  BackendOverrides,\n  LanguageRegistration,\n  StringOptions,\n} from \"../../common/types\";\nimport {shapeBackend} from \"../../common/util\";\nimport * as co_lc from \"co_lc\";\nimport {graphql, useStaticQuery} from \"gatsby\";\n\nfunction useExamples() {\n  const allExamples = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"co\" } }) {\n        nodes {\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `);\n\n  const [examples, setExamples] = React.useState<Record<string, string>>({});\n\n  React.useEffect(() => {\n    async function go() {\n      const newExamples: Record<string, string> = {};\n      for (const file of allExamples.allFile.nodes) {\n        const exampleName = file.relativePath.split(\"/\").at(-1).split(\".co\")[0];\n        const base = process.env[\"HOST\"];\n        const content = await fetch(new URL(file.publicURL, base))\n          .then((r) => r.text())\n          .then((s) => {\n            return co_lc.userProgram(s);\n          });\n        examples[exampleName] = content;\n      }\n      setExamples(newExamples);\n    }\n\n    go();\n  }, [allExamples.allFile.nodes, examples]);\n\n  return examples;\n}\n\nfunction getBackends(\n  defaultEmit: string,\n  overrides: Record<string, BackendOverrides>\n): Record<string, BackendKind> {\n  const backends: Record<string, BackendKind> = {};\n  for (const phase of co_lc.phases) {\n    const doit = (prog: string, emit: string) =>\n      co_lc.compile(prog, phase, emit);\n    const options: [[string, StringOptions]] = [\n      [\"emit\", {value: defaultEmit, options: co_lc.emits}],\n    ];\n\n    const backend: Backend = {\n      title: phase,\n      editorLanguage: overrides[phase]?.editorLanguage ?? \"co_lc\",\n      ...shapeBackend(doit, options),\n    };\n\n    if (phase === \"ir\") {\n      const evalP = \"eval\";\n      const doEmit = (prog: string, emit: string) =>\n        co_lc.compile(prog, evalP, emit);\n      backends[phase] = [\n        backend,\n        {\n          title: evalP,\n          editorLanguage: overrides[phase]?.editorLanguage ?? \"co_lc\",\n          ...shapeBackend(doEmit, options),\n        },\n      ];\n    } else {\n      backends[phase] = [backend];\n    }\n  }\n  return backends;\n}\n\nconst coLcSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\n    \"let\",\n    \"in\",\n    \"yield\",\n    \"spawn\",\n    \"resume\",\n    \"if\",\n    \"then\",\n    \"else\",\n    \"stat\",\n    \"\\\\\",\n  ],\n  symbols: /[*+_{}|<>,\\\\?\\->.:=!;[\\]+]|(->)/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [/\\d+/, \"number\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/`Pending|`Done/, \"keyword\"],\n      [/[A-Z][a-zA-Z0-9_'\\w$]*/, \"constructor\"],\n      {include: \"@whitespace\"},\n      [/: \\s*/, \"operator\", \"@type\"],\n      [/[()]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/#\\s+[\\^]+$/, \"comment\"],\n      [/#\\s+[\\^]+/, \"comment\", \"@type\"],\n      [/#.*$/, \"comment\"],\n    ],\n    type: [\n      [/\\]$/, \"keyword.type\", \"@popall\"],\n      [/\\]/, \"keyword.type\", \"@pop\"],\n      [/\\[/, \"keyword.type\", \"@push\"],\n      [/\\}$/, \"keyword.type\", \"@popall\"],\n      [/\\}/, \"keyword.type\", \"@pop\"],\n      [/\\{/, \"keyword.type\", \"@push\"],\n      [/,/, \"keyword.type\"],\n      [/;/, \"keyword.type\"],\n      [/[A-z][a-zA-Z]*$/, \"tag\", \"@pop\"],\n      [/[A-z][a-zA-Z]*\\s/, \"tag\", \"@pop\"],\n      [/int/, \"keyword.type\"],\n      [/void/, \"keyword.type\"],\n      [/\\s*$/, \"@whitespace\", \"@pop\"],\n      [/\\s+/, \"@whitespace\"],\n      [/=/, \"default\", \"@pop\"],\n    ],\n  },\n};\n\nconst vmSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [],\n  symbols: /[,;<>\\\\?\\->.:=\\u03BB]+/,\n\n  tokenizer: {\n    root: [\n      // Label definition\n      [/^[.a-zA-Z0-9_$?@].*:/, {token: \"type.identifier\"}],\n      // instr\n      [/[a-z][-_a-z0-9]*/, {token: \"keyword\", next: \"@rest\"}],\n      [/[<=]/, {token: \"keyword\", next: \"@rest\"}],\n      [/\\d+/, \"number\"],\n      {include: \"@whitespace\"},\n      [/[{()}]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    rest: [\n      // pop at the beginning of the next line and rematch\n      [/^.*$/, {token: \"@rematch\", next: \"@pop\"}],\n\n      // brackets\n      [/[{}<>()[\\]]/, \"@brackets\"],\n\n      // numbers\n      [/-?\\d+/, \"number\"],\n\n      // label reference\n      [/[a-z][-_a-zA-Z]*/, \"type.identifier\"],\n\n      // whitespace\n      {include: \"@whitespace\"},\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(%.*$)/, \"comment\"],\n    ],\n  },\n};\n\nconst languages: Record<\"co_lc\" | \"vm\", LanguageRegistration> = {\n  co_lc: {\n    syntax: coLcSyntax,\n    hover:\n      (m: typeof monaco) =>\n        (model: monaco.editor.ITextModel, pos: monaco.Position) => {\n          const program = model.getValue();\n          const hover = co_lc.hover(program, pos.lineNumber, pos.column);\n          if (hover === null) return null;\n          const {\n            info,\n            range: {start, fin},\n          } = hover;\n          return {\n            range: new m.Range(start.line, start.col, fin.line, fin.col),\n            contents: info.map((value) => {\n              return {value};\n            }),\n          };\n        },\n  },\n  vm: {\n    syntax: vmSyntax,\n  },\n};\n\nconst CoLcPlayground = () => {\n  const examples = useExamples();\n\n  const backends = getBackends(\"print\", {\n    ir: {\n      editorLanguage: \"vm\",\n    },\n  });\n\n  return (\n    <Playground\n      title=\"co_lc Playground\"\n      language=\"co_lc\"\n      source=\"https://github.com/ayazhafiz/plts/tree/base/co_lc\"\n      grammar={`https://github.com/ayazhafiz/plts/blob/base/co_lc/ast_parser.mly`}\n      languageRegistrations={languages}\n      backends={backends}\n      defaultBackend=\"ir\"\n      examples={examples}\n      defaultExample={\"fib\"}\n    />\n  );\n};\nexport default CoLcPlayground;\n"],"names":["languages","co_lc","syntax","defaultToken","keywords","symbols","lower","tokenizer","root","cases","include","whitespace","type","hover","m","model","pos","program","getValue","lineNumber","column","info","range","start","fin","Range","line","col","contents","map","value","vm","token","next","rest","CoLcPlayground","examples","allExamples","useStaticQuery","setExamples","React","async","file","allFile","nodes","exampleName","relativePath","split","at","base","process","content","fetch","URL","publicURL","then","r","text","s","go","useExamples","backends","defaultEmit","overrides","phase","_overrides$phase$edit","_overrides$phase","doit","prog","emit","options","backend","title","editorLanguage","shapeBackend","_overrides$phase$edit2","_overrides$phase2","evalP","doEmit","getBackends","ir","Playground","language","source","grammar","languageRegistrations","defaultBackend","defaultExample"],"sourceRoot":""}