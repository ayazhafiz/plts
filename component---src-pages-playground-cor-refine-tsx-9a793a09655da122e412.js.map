{"version":3,"file":"component---src-pages-playground-cor-refine-tsx-9a793a09655da122e412.js","mappings":"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","sources":["webpack://www/./src/components/cor.tsx","webpack://www/./src/pages/playground/cor/refine.tsx","webpack://www/../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"./playground\";\nimport type {\n  Backend,\n  BackendOverrides,\n  LanguageRegistration,\n  StringOptions,\n} from \"../common/types\";\nimport { shapeBackend } from \"../common/util\";\nimport * as cor from \"cor\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction getBackends(\n  lang: string,\n  defaultEmit: string,\n  overrides: Record<string, BackendOverrides>,\n): Record<string, [Backend]> {\n  const backends: Record<string, [Backend]> = {};\n  for (const phase of cor.phases) {\n    let doit = (prog: string, emit: string) =>\n      cor.compile(prog, lang, phase, emit);\n    let options: [[string, StringOptions]] = [\n      [\"emit\", { value: defaultEmit, options: cor.emits }],\n    ];\n    let backend: Backend = {\n      title: phase,\n      editorLanguage: overrides[phase]?.editorLanguage ?? lang,\n      ...shapeBackend(doit, options),\n    };\n    backends[phase] = [backend];\n  }\n  return backends;\n}\n\nfunction createHover(lang: string): LanguageRegistration[\"hover\"] {\n  return (m: typeof monaco) =>\n    (model: monaco.editor.ITextModel, pos: monaco.Position) => {\n      const program = model.getValue();\n      const hover = cor.hover(program, lang, pos.lineNumber, pos.column);\n      const {\n        info,\n        range: { start, fin },\n      } = hover;\n      return {\n        range: new m.Range(start.line, start.col, fin.line, fin.col),\n        contents: info.map((value) => {\n          return { value };\n        }),\n      };\n    };\n}\n\nconst CorPlayground: React.FC<{\n  experiment: string;\n  defaultPhase: string;\n  defaultEmit: string;\n  backendOverrides?: Record<string, BackendOverrides>,\n  languageRegistrations?: Record<string, LanguageRegistration>;\n}> = ({\n  experiment,\n  defaultPhase,\n  defaultEmit,\n  backendOverrides = {},\n  languageRegistrations = {},\n}) => {\n  if (languageRegistrations[experiment]) {\n    languageRegistrations[experiment].hover = createHover(experiment);\n  }\n\n  const allExamples = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"roc\" } }) {\n        nodes {\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `);\n\n  const examples: Record<string, string> = {};\n  for (const file of allExamples.allFile.nodes) {\n    if (file.relativePath.includes(`/${experiment}/`)) {\n      const exampleName = file.relativePath.split(\"/\").at(-1).split(\".roc\")[0];\n      const [content, setContent] = React.useState(\"\");\n      const base = process.env[\"HOST\"];\n      fetch(new URL(file.publicURL, base))\n        .then((r) => r.text())\n        .then((s) => {\n          return cor.userProgram(s);\n        })\n        .then(setContent)\n        .catch(() => {\n          console.log(\"failed to fetch\", base, file.publicURL);\n        });\n      examples[exampleName] = content;\n    }\n  }\n\n  return (\n    <Playground\n      title={`cor/${experiment} Playground`}\n      language={experiment}\n      source={`https://github.com/ayazhafiz/cor/tree/base/experiments/${experiment}`}\n      grammar={`https://github.com/ayazhafiz/cor/blob/base/experiments/${experiment}/parser.mly`}\n      languageRegistrations={languageRegistrations}\n      backends={getBackends(experiment, defaultEmit, backendOverrides)}\n      defaultBackend={defaultPhase}\n      examples={examples}\n      defaultExample={Object.keys(examples)[0]}\n    />\n  );\n};\n\nexport default CorPlayground;\n","import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport { BackendOverrides, LanguageRegistration } from \"../../../common/types\";\nimport CorPlayground from \"../../../components/cor\";\n\nconst refine = \"refine\";\n\nconst refineSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\"let\", \"in\", \"when\", \"is\", \"as\"],\n  symbols: /[,_\\{\\}\\|<>\\\\?\\->.=!;\\[\\]+]|(->)/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/[A-Z][a-zA-Z0-9_'\\w$]*/, \"constructor\"],\n      { include: \"@whitespace\" },\n      [/[()]/, \"@brackets\"],\n      [/`\\d+/, \"tag\"],\n      [/~\\d+/, \"tag\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n      [/:\\s*/, \"operator\", \"@type\"],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/#\\s*[\\^]+\\s+[a-z][a-zA-Z\\s0-9_'!]*$/, \"comment\"],\n      [/#\\s*[\\^]+$/, \"comment\"],\n      [/#\\s*([\\^]+\\s*)+$/, \"comment\"],\n      [/#\\s*[\\^]+/, \"comment\", \"@type\"],\n      [/#.*$/, \"comment\"],\n    ],\n    type: [\n      [/\\]$/, \"keyword.type\", \"@popall\"],\n      [/\\]/, \"keyword.type\", \"@popall\"],\n      [/\\[/, \"keyword.type\"],\n      [/,/, \"keyword.type\"],\n      [/([`?]\\d+)$/, \"tag\", \"@popall\"],\n      [/([`?]\\d+)/, \"tag\"],\n      [/[A-Z][a-zA-Z0-9]*$/, \"type\", \"@popall\"],\n      [/[A-Z][a-zA-Z0-9]*/, \"type\"],\n      [/[ \\t]*$/, \"@whitespace\", \"@popall\"],\n      [/[ \\t]+/, \"@whitespace\"],\n    ],\n  },\n};\n\nconst irSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\"let\", \"in\", \"when\", \"is\", \"as\", \"switch\", \"feed\"],\n  symbols: /[,\\{\\}=;:]/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/%\\d+/, \"identifier\"],\n      [/\\d+/, \"number\"],\n      [/@[a-z_]*/, \"keyword\"],\n      [/ :\\s*/, \"operator\", \"@type\"],\n      { include: \"@whitespace\" },\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n    ],\n    type: [\n      [/\\]$/, \"keyword.type\", \"@popall\"],\n      [/\\]/, \"keyword.type\", \"@pop\"],\n      [/\\[/, \"keyword.type\", \"@push\"],\n      [/\\}$/, \"keyword.type\", \"@popall\"],\n      [/\\}/, \"keyword.type\", \"@pop\"],\n      [/\\{/, \"keyword.type\", \"@push\"],\n      [/,/, \"keyword.type\"],\n      [/`\\d+$/, \"tag\", \"@pop\"],\n      [/`\\d+/, \"tag\"],\n      [/int/, \"keyword.type\"],\n      [/void/, \"keyword.type\"],\n      [/\\s*$/, \"@whitespace\", \"@pop\"],\n      [/\\s+/, \"@whitespace\"],\n      [/=/, \"default\", \"@pop\"],\n    ],\n  },\n};\n\nconst languageRegistrations: Record<typeof refine|\"ir\", LanguageRegistration> = {\n  [refine]: {\n    syntax: refineSyntax,\n  },\n  ir: {\n    syntax: irSyntax,\n  }\n};\n\nconst backendOverrides: Record<string, BackendOverrides> = {\n  ir: {\n    editorLanguage: \"ir\",\n  },\n};\n\nconst RefinePlayground: React.FC<{}> = ({}) =>\n  CorPlayground({\n    experiment: refine,\n    defaultPhase: \"solve\",\n    defaultEmit: \"elab\",\n    languageRegistrations,\n    backendOverrides,\n  });\n\nexport default RefinePlayground;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["getBackends","backends","phase","options","value","cor","backend","title","editorLanguage","overrides","lang","shapeBackend","prog","experiment","defaultPhase","defaultEmit","backendOverrides","languageRegistrations","program","model","hover","pos","info","start","fin","range","m","contents","allExamples","useStaticQuery","examples","file","exampleName","React","content","setContent","base","process","fetch","URL","r","console","language","source","grammar","defaultBackend","defaultExample","Object","refine","syntax","defaultToken","keywords","symbols","lower","tokenizer","root","cases","include","whitespace","type","ir","CorPlayground","_objectDestructuringEmpty","obj","TypeError"],"sourceRoot":""}