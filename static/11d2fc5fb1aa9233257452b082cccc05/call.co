# +ir -print
# +eval -print
let double = \n -> n * 2 in
let plus5 = \m -> m + 5 in
let addTo5AndDouble = \n -> double (plus5 n) in
addTo5AndDouble 10

> +ir -print
> plus5: {
> % Stack relative to frame pointer:
> %   -5  #return
> %   -4  m
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> plus5:
>   push 5
>   push fp[-4]
>   add
>   store-into fp[-5]
>   ret
> }
> 
> addTo5AndDouble: {
> % Stack relative to frame pointer:
> %   -5  #return
> %   -4  n1
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> addTo5AndDouble:
>   sp-add 1
>   sp-add 1
>   push fp[-4]
>   call plus5
>   sp-sub 1
>   call double
>   sp-sub 1
>   store-into fp[-5]
>   ret
> }
> 
> double: {
> % Stack relative to frame pointer:
> %   -5  #return
> %   -4  n
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> double:
>   push 2
>   push fp[-4]
>   mul
>   store-into fp[-5]
>   ret
> }
> 
> @main: {
> % Stack relative to frame pointer:
> %   -4  #return
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> @main:
>   sp-add 1
>   push 10
>   call addTo5AndDouble
>   sp-sub 1
>   store-into fp[-4]
>   ret
> }

> +eval -print
> 30