(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8422],{49711:function(e,t,n){"use strict";n.r(t);var i=n(27378),a=n(21237),o=n(60175),r=n(68933),s=n(13673),l={Fibonacci:"\nlet $fib =\n  (fix fib (n: int): int.\n    if0 n then 0\n    else if0 (n - 1) then 1   # n = 1\n    else fib (n - 1) + fib (n - 2)) in\nlet $twice =\n  (Λa. fix inf(f: a->a): a->a.\n       fix inx(x: a): a.\n         f (f x)) in\nlet $double =\n  (fix double(n: int): int.\n    ($twice<int>) (fix inx(x: int): int. x + n) 0) in\n$double ($fib 8)\n".trim()},c={TAL:[{title:"TAL",do:(0,o.Fr)(r.talCompile),options:[],editorLanguage:"tal"},{title:"TAL Execution",do:(0,o.Fr)(r.talEval),options:[],editorLanguage:"tal"}],x86:[{title:"x86",do:(0,o.Fr)(r.x86Compile),options:[],info:[["Codegen info",i.createElement(s.Z,{children:"\nRegister allocation is based on the [Linear Scan Register Allocation](http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf)\nof Poletto and Sarkar (1999). We number instructions as they appear in the TAL\nIR, not in the order they would execute.\n\nThis poor ordering is simple to implement but results in many spills, as\ncan be seen in the generated code. The large number of spills demands multiple\npasses of register allocation, slowing down compilation time.\n\nSpilled variables live at the very top of the stack, with space allocated for\nthem before any code is executed.\n".trim()})]],editorLanguage:"tal"},{title:"x86 Emulation",do:(0,o.Fr)(r.x86Emulate),options:[],editorLanguage:"tal"}]},d={systemF:{syntax:{defaultToken:"invalid",keywords:["fix","if0","then","else","Λ","let","in"],typeKeywords:["int","∀"],symbols:/[=><!~?:&|+\-*\/\^%.,]+/,tokenizer:{root:[[/[a-z_A-Z][\w0-9$]*|[∀Λ]/,{cases:{"@typeKeywords":"keyword","@keywords":"keyword","@default":"identifier"}}],{include:"@whitespace"},[/[{}()\[\]]/,"@brackets"],[/[%$][a-z_A-Z0-9]*/,"annotation"],[/@symbols/,"operator"],[/\d+/,"number"]],whitespace:[[/[ \t\r\n]+/,"white"],[/(^#.*$)/,"comment"]]}}},tal:{syntax:{defaultToken:"invalid",registers:/%?\b(r[0-9a-z]+)\b/,keywords:["pack","code","halt","as"],tokenizer:{root:[[/^<.*>$/,{token:"annotation"}],[/^[.a-zA-Z0-9_$?@].*:/,{token:"type.identifier"}],[/^[.a-zA-Z0-9_$?@][^=]*=/,{token:"type.identifier"}],[/[.a-zA-Z_][.a-zA-Z_0-9']*/,{token:"keyword",next:"@rest"}],[/[(){}\[\]\-<>]/,{token:"operator",next:"@rest"}],[/\d+/,"number"],{include:"@whitespace"}],rest:[[/^.*$/,{token:"@rematch",next:"@pop"}],[/@registers/,"variable.predefined"],[/\d+/,"number"],[/[,\(\):,\[\]\-<>∃∀+]/,"operator"],[/%?[.?_$a-zA-Z@][.?_$a-zA-Z0-9'@]*/,{cases:{"@keywords":"keyword","@default":"type.identifier"}}],{include:"@whitespace"}],comment:[[/[^/*]+/,"comment"],[/\/\*/,"comment","@push"],["\\*/","comment","@pop"],[/[/*]/,"comment"]],whitespace:[[/[ \t\r\n]+/,"white"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"],[/[#;\\@].*$/,"comment"]]}}}};t.default=function(){return i.createElement(a.Z,{language:"systemF",source:"https://github.com/ayazhafiz/plts/tree/base/TAL",grammar:"https://github.com/ayazhafiz/plts/blob/base/TAL/parser.mly",languageRegistrations:d,backends:c,defaultBackend:"TAL",examples:l,defaultExample:"Fibonacci"})}},97244:function(){},79122:function(){}}]);
//# sourceMappingURL=component---src-pages-playground-tal-tsx-a0cfdefaaec72235a77c.js.map