{"version":3,"file":"3812-243258c281e1fc76eb0f.js","mappings":"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","sources":["webpack://www/../node_modules/monaco-editor/esm/vs/basic-languages/ecl/ecl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.ecl',\n  ignoreCase: true,\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  pounds: ['append', 'break', 'declare', 'demangle', 'end', 'for', 'getdatatype', 'if', 'inmodule', 'loop', 'mangle', 'onwarning', 'option', 'set', 'stored', 'uniquename'].join('|'),\n  keywords: ['__compressed__', 'after', 'all', 'and', 'any', 'as', 'atmost', 'before', 'beginc', 'best', 'between', 'case', 'cluster', 'compressed', 'compression', 'const', 'counter', 'csv', 'default', 'descend', 'embed', 'encoding', 'encrypt', 'end', 'endc', 'endembed', 'endmacro', 'enum', 'escape', 'except', 'exclusive', 'expire', 'export', 'extend', 'fail', 'few', 'fileposition', 'first', 'flat', 'forward', 'from', 'full', 'function', 'functionmacro', 'group', 'grouped', 'heading', 'hole', 'ifblock', 'import', 'in', 'inner', 'interface', 'internal', 'joined', 'keep', 'keyed', 'last', 'left', 'limit', 'linkcounted', 'literal', 'little_endian', 'load', 'local', 'locale', 'lookup', 'lzw', 'macro', 'many', 'maxcount', 'maxlength', 'min skew', 'module', 'mofn', 'multiple', 'named', 'namespace', 'nocase', 'noroot', 'noscan', 'nosort', 'not', 'noxpath', 'of', 'onfail', 'only', 'opt', 'or', 'outer', 'overwrite', 'packed', 'partition', 'penalty', 'physicallength', 'pipe', 'prefetch', 'quote', 'record', 'repeat', 'retry', 'return', 'right', 'right1', 'right2', 'rows', 'rowset', 'scan', 'scope', 'self', 'separator', 'service', 'shared', 'skew', 'skip', 'smart', 'soapaction', 'sql', 'stable', 'store', 'terminator', 'thor', 'threshold', 'timelimit', 'timeout', 'token', 'transform', 'trim', 'type', 'unicodeorder', 'unordered', 'unsorted', 'unstable', 'update', 'use', 'validate', 'virtual', 'whole', 'width', 'wild', 'within', 'wnotrim', 'xml', 'xpath'],\n  functions: ['abs', 'acos', 'aggregate', 'allnodes', 'apply', 'ascii', 'asin', 'assert', 'asstring', 'atan', 'atan2', 'ave', 'build', 'buildindex', 'case', 'catch', 'choose', 'choosen', 'choosesets', 'clustersize', 'combine', 'correlation', 'cos', 'cosh', 'count', 'covariance', 'cron', 'dataset', 'dedup', 'define', 'denormalize', 'dictionary', 'distribute', 'distributed', 'distribution', 'ebcdic', 'enth', 'error', 'evaluate', 'event', 'eventextra', 'eventname', 'exists', 'exp', 'fail', 'failcode', 'failmessage', 'fetch', 'fromunicode', 'fromxml', 'getenv', 'getisvalid', 'global', 'graph', 'group', 'hash', 'hash32', 'hash64', 'hashcrc', 'hashmd5', 'having', 'httpcall', 'httpheader', 'if', 'iff', 'index', 'intformat', 'isvalid', 'iterate', 'join', 'keydiff', 'keypatch', 'keyunicode', 'length', 'library', 'limit', 'ln', 'loadxml', 'local', 'log', 'loop', 'map', 'matched', 'matchlength', 'matchposition', 'matchtext', 'matchunicode', 'max', 'merge', 'mergejoin', 'min', 'nofold', 'nolocal', 'nonempty', 'normalize', 'nothor', 'notify', 'output', 'parallel', 'parse', 'pipe', 'power', 'preload', 'process', 'project', 'pull', 'random', 'range', 'rank', 'ranked', 'realformat', 'recordof', 'regexfind', 'regexreplace', 'regroup', 'rejected', 'rollup', 'round', 'roundup', 'row', 'rowdiff', 'sample', 'sequential', 'set', 'sin', 'sinh', 'sizeof', 'soapcall', 'sort', 'sorted', 'sqrt', 'stepped', 'stored', 'sum', 'table', 'tan', 'tanh', 'thisnode', 'topn', 'tounicode', 'toxml', 'transfer', 'transform', 'trim', 'truncate', 'typeof', 'ungroup', 'unicodeorder', 'variance', 'wait', 'which', 'workunit', 'xmldecode', 'xmlencode', 'xmltext', 'xmlunicode'],\n  typesint: ['integer', 'unsigned'].join('|'),\n  typesnum: ['data', 'qstring', 'string', 'unicode', 'utf8', 'varstring', 'varunicode'],\n  typesone: ['ascii', 'big_endian', 'boolean', 'data', 'decimal', 'ebcdic', 'grouped', 'integer', 'linkcounted', 'pattern', 'qstring', 'real', 'record', 'rule', 'set of', 'streamed', 'string', 'token', 'udecimal', 'unicode', 'unsigned', 'utf8', 'varstring', 'varunicode'].join('|'),\n  operators: ['+', '-', '/', ':=', '<', '<>', '=', '>', '\\\\', 'and', 'in', 'not', 'or'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // escape sequences\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/@typesint[4|8]/, 'type'], [/#(@pounds)/, 'type'], [/@typesone/, 'type'], [/[a-zA-Z_$][\\w-$]*/, {\n      cases: {\n        '@functions': 'keyword.function',\n        '@keywords': 'keyword',\n        '@operators': 'operator'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F_]+/, 'number.hex'], [/0[bB][01]+/, 'number.hex'], [/[0-9_]+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string'], // characters\n    [/'[^\\\\']'/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\v\\f\\r\\n]+/, ''], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    string: [[/[^\\\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, 'string', '@pop']]\n  }\n};"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","token","pounds","join","keywords","functions","typesint","typesnum","typesone","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","string"],"sourceRoot":""}