{"version":3,"file":"component---src-pages-playground-cor-refine-tsx-47fe70072d861f133000.js","mappings":"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","sources":["webpack://www/./src/components/cor.tsx","webpack://www/./src/pages/playground/cor/refine.tsx"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"./playground\";\nimport type {\n  Backend,\n  BackendOverrides,\n  LanguageRegistration,\n  StringOptions,\n} from \"../common/types\";\nimport { shapeBackend } from \"../common/util\";\nimport * as cor from \"cor\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction getBackends(\n  lang: string,\n  defaultEmit: string,\n  overrides: Record<string, BackendOverrides>,\n): Record<string, [Backend]> {\n  const backends: Record<string, [Backend]> = {};\n  for (const phase of cor.phases) {\n    let doit = (prog: string, emit: string) =>\n      cor.compile(prog, lang, phase, emit);\n    let options: [[string, StringOptions]] = [\n      [\"emit\", { value: defaultEmit, options: cor.emits }],\n    ];\n    let backend: Backend = {\n      title: phase,\n      editorLanguage: overrides[phase]?.editorLanguage ?? lang,\n      ...shapeBackend(doit, options),\n    };\n    backends[phase] = [backend];\n  }\n  return backends;\n}\n\nfunction createHover(lang: string): LanguageRegistration[\"hover\"] {\n  return (m: typeof monaco) =>\n    (model: monaco.editor.ITextModel, pos: monaco.Position) => {\n      const program = model.getValue();\n      const hover = cor.hover(program, lang, pos.lineNumber, pos.column);\n      const {\n        info,\n        range: { start, fin },\n      } = hover;\n      return {\n        range: new m.Range(start.line, start.col, fin.line, fin.col),\n        contents: info.map((value) => {\n          return { value };\n        }),\n      };\n    };\n}\n\nconst CorPlayground: React.FC<{\n  experiment: string;\n  defaultPhase: string;\n  defaultEmit: string;\n  backendOverrides?: Record<string, BackendOverrides>,\n  languageRegistrations?: Record<string, LanguageRegistration>;\n}> = ({\n  experiment,\n  defaultPhase,\n  defaultEmit,\n  backendOverrides = {},\n  languageRegistrations = {},\n}) => {\n  if (languageRegistrations[experiment]) {\n    languageRegistrations[experiment].hover = createHover(experiment);\n  }\n\n  const allExamples = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"roc\" } }) {\n        nodes {\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `);\n\n  const examples: Record<string, string> = {};\n  for (const file of allExamples.allFile.nodes) {\n    if (file.relativePath.includes(`/${experiment}/`)) {\n      const exampleName = file.relativePath.split(\"/\").at(-1).split(\".roc\")[0];\n      const [content, setContent] = React.useState(\"\");\n      const base = process.env[\"HOST\"];\n      fetch(new URL(file.publicURL, base))\n        .then((r) => r.text())\n        .then((s) => {\n          return cor.userProgram(s);\n        })\n        .then(setContent)\n        .catch(() => {\n          console.log(\"failed to fetch\", base, file.publicURL);\n        });\n      examples[exampleName] = content;\n    }\n  }\n\n  return (\n    <Playground\n      title={`cor/${experiment} Playground`}\n      language={experiment}\n      source={`https://github.com/ayazhafiz/cor/tree/base/experiments/${experiment}`}\n      grammar={`https://github.com/ayazhafiz/cor/blob/base/experiments/${experiment}/parser.mly`}\n      languageRegistrations={languageRegistrations}\n      backends={getBackends(experiment, defaultEmit, backendOverrides)}\n      defaultBackend={defaultPhase}\n      examples={examples}\n      defaultExample={Object.keys(examples)[0]}\n    />\n  );\n};\n\nexport default CorPlayground;\n","import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport { BackendOverrides, LanguageRegistration } from \"../../../common/types\";\nimport CorPlayground from \"../../../components/cor\";\n\nconst refine = \"refine\";\n\nconst refineSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\"let\", \"in\", \"when\", \"is\", \"as\"],\n  symbols: /[,_\\{\\}\\|<>\\\\?\\->.=!;\\[\\]+]|(->)/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/[A-Z][a-zA-Z0-9_'\\w$]*/, \"constructor\"],\n      { include: \"@whitespace\" },\n      [/[()]/, \"@brackets\"],\n      [/`\\d+/, \"tag\"],\n      [/~\\d+/, \"tag\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n      [/:\\s*/, \"operator\", \"@type\"],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/#\\s*[\\^]+\\s+[a-z][a-zA-Z\\s0-9_'!]*$/, \"comment\"],\n      [/#\\s*[\\^]+$/, \"comment\"],\n      [/#\\s*([\\^]+\\s*)+$/, \"comment\"],\n      [/#\\s*[\\^]+/, \"comment\", \"@type\"],\n      [/#.*$/, \"comment\"],\n    ],\n    type: [\n      [/\\]$/, \"keyword.type\", \"@popall\"],\n      [/\\]/, \"keyword.type\", \"@popall\"],\n      [/\\[/, \"keyword.type\"],\n      [/,/, \"keyword.type\"],\n      [/([`?]\\d+)$/, \"tag\", \"@popall\"],\n      [/([`?]\\d+)/, \"tag\"],\n      [/[A-Z][a-zA-Z0-9]*$/, \"type\", \"@popall\"],\n      [/[A-Z][a-zA-Z0-9]*/, \"type\"],\n      [/[ \\t]*$/, \"@whitespace\", \"@popall\"],\n      [/[ \\t]+/, \"@whitespace\"],\n    ],\n  },\n};\n\nconst irSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\"let\", \"in\", \"when\", \"is\", \"as\", \"switch\", \"feed\"],\n  symbols: /[,\\{\\}=;:]/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/%\\d+/, \"identifier\"],\n      [/\\d+/, \"number\"],\n      [/@[a-z_]*/, \"keyword\"],\n      [/ :\\s*/, \"operator\", \"@type\"],\n      { include: \"@whitespace\" },\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n    ],\n    type: [\n      [/\\]$/, \"keyword.type\", \"@popall\"],\n      [/\\]/, \"keyword.type\", \"@pop\"],\n      [/\\[/, \"keyword.type\", \"@push\"],\n      [/\\}$/, \"keyword.type\", \"@popall\"],\n      [/\\}/, \"keyword.type\", \"@pop\"],\n      [/\\{/, \"keyword.type\", \"@push\"],\n      [/,/, \"keyword.type\"],\n      [/`\\d+$/, \"tag\", \"@pop\"],\n      [/`\\d+/, \"tag\"],\n      [/int/, \"keyword.type\"],\n      [/void/, \"keyword.type\"],\n      [/\\s*$/, \"@whitespace\", \"@pop\"],\n      [/\\s+/, \"@whitespace\"],\n      [/=/, \"default\", \"@pop\"],\n    ],\n  },\n};\n\nconst languageRegistrations: Record<typeof refine|\"ir\", LanguageRegistration> = {\n  [refine]: {\n    syntax: refineSyntax,\n  },\n  ir: {\n    syntax: irSyntax,\n  }\n};\n\nconst backendOverrides: Record<string, BackendOverrides> = {\n  ir: {\n    editorLanguage: \"ir\",\n  },\n};\n\nconst RefinePlayground: React.FC<{}> = ({}) =>\n  CorPlayground({\n    experiment: refine,\n    defaultPhase: \"solve\",\n    defaultEmit: \"elab\",\n    languageRegistrations,\n    backendOverrides,\n  });\n\nexport default RefinePlayground;\n"],"names":["getBackends","lang","defaultEmit","overrides","backends","phase","cor","_overrides$phase$edit","_overrides$phase","doit","prog","emit","options","value","backend","title","editorLanguage","shapeBackend","_ref","experiment","defaultPhase","backendOverrides","languageRegistrations","hover","m","model","pos","program","getValue","lineNumber","column","info","range","start","fin","Range","line","col","contents","map","allExamples","useStaticQuery","examples","file","allFile","nodes","relativePath","includes","exampleName","split","at","content","setContent","React","base","process","fetch","URL","publicURL","then","r","text","s","catch","console","log","Playground","language","source","grammar","defaultBackend","defaultExample","Object","keys","refine","syntax","defaultToken","keywords","symbols","lower","tokenizer","root","cases","include","whitespace","type","ir","CorPlayground"],"sourceRoot":""}