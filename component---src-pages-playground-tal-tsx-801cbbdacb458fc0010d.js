(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8422],{77296:function(e,t,n){"use strict";n.d(t,{L:function(){return i}});const i={defaultToken:"invalid",escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,registers:/%?\b(r[0-9]+[dbw]?|([er]?([abcd][xhl]|cs|fs|ds|ss|sp|bp|ip|sil?|dil?))|[xyz]mm[0-9]+|sp|fp|lr)\b/,intelOperators:/PTR|(D|Q|[XYZ]MM)?WORD/,tokenizer:{root:[[/^<.*>$/,{token:"annotation"}],[/^[.a-zA-Z0-9_$?@].*:/,{token:"type.identifier"}],[/^"([^"\\]|\\.)*":/,{token:"type.identifier"}],[/^\s*[|][^|]*[|]/,{token:"type.identifier"}],[/^\s*[.a-zA-Z0-9_$|]*\s+(PROC|ENDP|DB|DD)/,{token:"type.identifier"}],[/^[.a-zA-Z0-9_$?@][^=]*=/,{token:"type.identifier"}],[/[.a-zA-Z_][.a-zA-Z_0-9]*/,{token:"keyword",next:"@rest"}],[/[(){}]/,{token:"operator",next:"@rest"}],{include:"@whitespace"}],rest:[[/^.*$/,{token:"@rematch",next:"@pop"}],[/@registers/,"variable.predefined"],[/@intelOperators/,"annotation"],[/[{}<>()[\]]/,"@brackets"],[/[|][^|]*[|]*/,"type.identifier"],[/\d*\.\d+([eE][-+]?\d+)?/,"number.float"],[/([$]|0[xX])[0-9a-fA-F]+/,"number.hex"],[/\d+/,"number"],[/#-?\d+/,"number"],[/[-+,*/!:&{}()]/,"operator"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/"/,{token:"string.quote",bracket:"@open",next:"@string"}],[/'[^\\']'/,"string"],[/(')(@escapes)(')/,["string","string.escape","string"]],[/'/,"string.invalid"],[/%?[.?_$a-zA-Z@][.?_$a-zA-Z0-9@]*/,"type.identifier"],{include:"@whitespace"}],comment:[[/[^/*]+/,"comment"],[/\/\*/,"comment","@push"],["\\*/","comment","@pop"],[/[/*]/,"comment"]],string:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,{token:"string.quote",bracket:"@close",next:"@pop"}]],whitespace:[[/[ \t\r\n]+/,"white"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"],[/[#;\\@].*$/,"comment"]]}}},23932:function(e,t,n){"use strict";n.r(t);var i=n(27378),a=n(67715),o=n(28407),s=n(77296),r=n(67155),l=n(73530);const c={Fibonacci:"\nlet $fib =\n  (fix fib (n: int): int.\n    if0 n then 0\n    else if0 (n - 1) then 1   # n = 1\n    else fib (n - 1) + fib (n - 2)) in\nlet $twice =\n  (Λa. fix inf(f: a->a): a->a.\n       fix inx(x: a): a.\n         f (f x)) in\nlet $double =\n  (fix double(n: int): int.\n    ($twice<int>) (fix inx(x: int): int. x + n) 0) in\n$double ($fib 8)\n".trim()},d={TAL:[{title:"TAL",do:(0,o.Fr)(r.talCompile),options:[],editorLanguage:"tal"},{title:"TAL Execution",do:(0,o.Fr)(r.talEval),options:[],editorLanguage:"tal"}],x86:[{title:"x86",do:(0,o.Fr)(r.x86Compile),options:[],info:[["Codegen info",i.createElement(l.D,{key:1},"Register allocation is based on the [Linear Scan Register Allocation](http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf) of Poletto and Sarkar (1999). We number instructions as they appear in the TAL IR, not in the order they would execute. This poor ordering is simple to implement but results in many spills, as can be seen in the generated code. The large number of spills demands multiple passes of register allocation, slowing down compilation time. Spilled variables live at the very top of the stack, with space allocated for them before any code is executed.")]],editorLanguage:"asm"},{title:"x86 Emulation",do:(0,o.Fr)(r.x86Emulate),options:[],editorLanguage:"tal"}]},p={systemF:{syntax:{defaultToken:"invalid",keywords:["fix","if0","then","else","Λ","let","in"],typeKeywords:["int","∀"],symbols:/[=><!~?:&|+\-*/^%.,]+/,tokenizer:{root:[[/[a-z_A-Z][\w0-9$]*|[∀Λ]/,{cases:{"@typeKeywords":"keyword","@keywords":"keyword","@default":"identifier"}}],{include:"@whitespace"},[/[{}()[\]]/,"@brackets"],[/[%$][a-z_A-Z0-9]*/,"annotation"],[/@symbols/,"operator"],[/\d+/,"number"]],whitespace:[[/[ \t\r\n]+/,"white"],[/(^#.*$)/,"comment"]]}}},tal:{syntax:{defaultToken:"invalid",registers:/%?\b(r[0-9a-z]+)\b/,keywords:["pack","code","halt","as"],tokenizer:{root:[[/^<.*>$/,{token:"annotation"}],[/^[.a-zA-Z0-9_$?@].*:/,{token:"type.identifier"}],[/^[.a-zA-Z0-9_$?@][^=]*=/,{token:"type.identifier"}],[/[.a-zA-Z_][.a-zA-Z_0-9']*/,{token:"keyword",next:"@rest"}],[/[(){}[\]\-<>]/,{token:"operator",next:"@rest"}],[/\d+/,"number"],{include:"@whitespace"}],rest:[[/^.*$/,{token:"@rematch",next:"@pop"}],[/@registers/,"variable.predefined"],[/\d+/,"number"],[/[,():,[\]\-<>∃∀+]/,"operator"],[/%?[.?_$a-zA-Z@][.?_$a-zA-Z0-9'@]*/,{cases:{"@keywords":"keyword","@default":"type.identifier"}}],{include:"@whitespace"}],comment:[[/[^/*]+/,"comment"],[/\/\*/,"comment","@push"],["\\*/","comment","@pop"],[/[/*]/,"comment"]],whitespace:[[/[ \t\r\n]+/,"white"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"],[/[#;\\@].*$/,"comment"]]}}},asm:{syntax:s.L}};t.default=()=>i.createElement(a.Z,{title:"TAL Playground",language:"systemF",source:"https://github.com/ayazhafiz/plts/tree/base/TAL",grammar:"https://github.com/ayazhafiz/plts/blob/base/TAL/parser.mly",languageRegistrations:p,backends:d,defaultBackend:"TAL",examples:c,defaultExample:"Fibonacci"})},97244:function(){},79122:function(){}}]);
//# sourceMappingURL=component---src-pages-playground-tal-tsx-801cbbdacb458fc0010d.js.map