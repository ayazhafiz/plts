{"version":3,"file":"13-ec3ac83b5d7a592fd470.js","mappings":"uKAEA,IAGIA,EAHmC,MAGd,yBAH6B,MAmB3CC,EAAO,CACdC,SAAU,CACNC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEzBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,MAAOC,MAAO,QAE1BC,iBAAkB,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,IAAKE,MAAO,CAAC,SAAU,YAC3C,CAAEH,KAAM,MAAOC,MAAO,MAAOE,MAAO,CAAC,SAAU,aAEnDC,gBAAiB,gBACjBC,iBAAkB,CACdC,sBAAuB,IAAIC,OAAO,8DAClCC,sBAAuB,IAAID,OAAO,4CAG/BE,EAAW,CAClBC,aAAc,GACdC,aAAc,SACdb,SAAU,CACN,CAAEE,KAAM,IAAKC,MAAO,IAAKW,MAAO,mBAChC,CAAEZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,oBAChC,CAAEZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,0BAEpCC,QAAS,sBACTC,SAtDW,CACX,cACA,WACA,SACA,QACA,MACA,SACA,MACA,KACA,KACA,YA6CAC,cA3CgB,CAAC,OAAQ,QAAS,QA4ClCC,QAAS,0CACTC,UAAW,CACPC,KAAM,CAAC,CAAEC,QAAS,eAAiB,CAAEA,QAAS,gBAC9CC,eAAgB,CACZ,CAAEC,MAAO,cAAeC,OAAQ,CAAEV,MAAO,WACzC,CAAES,MAAO,MAAOC,OAAQ,CAAEV,MAAO,eAAgBW,KAAM,UAE3DC,cAAe,CACX,CAAEH,MAAO,OAAQC,OAAQ,CAAEV,MAAO,oBAAqBW,KAAM,qBAC7D,CAAEF,MAAO,aAAcC,OAAQ,CAAEV,MAAO,WACxC,CAAES,MAAO,WAAYC,OAAQ,CAAEV,MAAO,kBACtC,CAAES,MAAO,QAASC,OAAQ,CAAEV,MAAO,0BACnC,CAAES,MAAO,IAAKC,OAAQ,CAAEV,MAAO,SAAUW,KAAM,UAEnDE,gBAAiB,CACb,CAAEJ,MAAO,IAAKC,OAAQ,CAAEV,MAAO,oBAAqBW,KAAM,qBAC1D,CAAEF,MAAO,IAAKC,OAAQ,CAAEV,MAAO,oBAAqBW,KAAM,SAC1D,CAAEJ,QAAS,eAEfO,QAAS,CACL,CAAEL,MAAO,UAAWC,OAAQ,CAAEV,MAAO,YACrC,CAAES,MAAO,SAAUC,OAAQ,CAAEV,MAAO,UAAWW,KAAM,SACrD,CAAEF,MAAO,SAAUC,OAAQ,CAAEV,MAAO,aAExCe,WAAY,CACR,CAAEN,MApEK,gBAqEP,CAAEA,MAAO,SAAUC,OAAQ,CAAEV,MAAO,UAAWW,KAAM,aACrD,CAAEF,MAAO,YAAaC,OAAQ,CAAEV,MAAO,aAE3CgB,WAAY,CACR,CAAEP,MAAO,MAAOC,OAAQ,CAAEV,MAAO,eAAgBW,KAAM,oBACvD,CAAEF,MAAO,IAAKC,OAAQ,CAAEV,MAAO,eAAgBW,KAAM,mBACrD,CAAEF,MA1EO,SA0EgBC,OAAQ,CAAEV,MAAO,WAC1C,CACIS,MAAO5B,EACP6B,OAAQ,CACJO,MAAO,CACH,YAAa,CAAEjB,MAAO,WACtB,iBAAkB,CAAEA,MAAO,WAC3B,WAAY,CAAEA,MAAO,mB","sources":["webpack://www/../node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar bounded = function (text) { return \"\\\\b\" + text + \"\\\\b\"; };\r\nvar identifierStart = '[_a-zA-Z]';\r\nvar identifierContinue = '[_a-zA-Z0-9]';\r\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\r\nvar keywords = [\r\n    'targetScope',\r\n    'resource',\r\n    'module',\r\n    'param',\r\n    'var',\r\n    'output',\r\n    'for',\r\n    'in',\r\n    'if',\r\n    'existing'\r\n];\r\nvar namedLiterals = ['true', 'false', 'null'];\r\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\r\nvar numericLiteral = \"[0-9]+\";\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"'''\", close: \"'''\" }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\r\n        { open: \"'''\", close: \"'''\", notIn: ['string', 'comment'] }\r\n    ],\r\n    autoCloseBefore: \":.,=}])' \\n\\t\",\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\r\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.bicep',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n    keywords: keywords,\r\n    namedLiterals: namedLiterals,\r\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\r\n    tokenizer: {\r\n        root: [{ include: '@expression' }, { include: '@whitespace' }],\r\n        stringVerbatim: [\r\n            { regex: \"(|'|'')[^']\", action: { token: 'string' } },\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@pop' } }\r\n        ],\r\n        stringLiteral: [\r\n            { regex: \"\\\\${\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"[^\\\\\\\\'$]+\", action: { token: 'string' } },\r\n            { regex: '@escapes', action: { token: 'string.escape' } },\r\n            { regex: \"\\\\\\\\.\", action: { token: 'string.escape.invalid' } },\r\n            { regex: \"'\", action: { token: 'string', next: '@pop' } }\r\n        ],\r\n        bracketCounting: [\r\n            { regex: \"{\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"}\", action: { token: 'delimiter.bracket', next: '@pop' } },\r\n            { include: 'expression' }\r\n        ],\r\n        comment: [\r\n            { regex: \"[^\\\\*]+\", action: { token: 'comment' } },\r\n            { regex: \"\\\\*\\\\/\", action: { token: 'comment', next: '@pop' } },\r\n            { regex: \"[\\\\/*]\", action: { token: 'comment' } }\r\n        ],\r\n        whitespace: [\r\n            { regex: nonCommentWs },\r\n            { regex: \"\\\\/\\\\*\", action: { token: 'comment', next: '@comment' } },\r\n            { regex: \"\\\\/\\\\/.*$\", action: { token: 'comment' } }\r\n        ],\r\n        expression: [\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@stringVerbatim' } },\r\n            { regex: \"'\", action: { token: 'string.quote', next: '@stringLiteral' } },\r\n            { regex: numericLiteral, action: { token: 'number' } },\r\n            {\r\n                regex: identifier,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@namedLiterals': { token: 'keyword' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n"],"names":["identifier","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","keywords","namedLiterals","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"sourceRoot":""}