{"version":3,"file":"component---src-pages-playground-co-lc-tsx-bbb3e47ebed54d5a9716.js","mappings":"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","sources":["webpack://www/./src/pages/playground/co_lc.tsx"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"../../components/playground\";\nimport type { Backend, BackendKind, BackendOverrides, LanguageRegistration, StringOptions } from \"../../common/types\";\nimport { shapeBackend } from \"../../common/util\";\nimport * as co_lc from \"co_lc\";\nimport {graphql, useStaticQuery} from \"gatsby\";\n\nfunction buildExamples() {\n  const allExamples = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"co\" } }) {\n        nodes {\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `);\n\n  const examples: Record<string, string> = {};\n  for (const file of allExamples.allFile.nodes) {\n    const exampleName = file.relativePath.split(\"/\").at(-1).split(\".co\")[0];\n    const [content, setContent] = React.useState(\"\");\n    const base = process.env[\"HOST\"];\n    fetch(new URL(file.publicURL, base))\n      .then((r) => r.text())\n      .then((s) => {\n        return co_lc.userProgram(s);\n      })\n      .then(setContent)\n      .catch(() => {\n        console.log(\"failed to fetch\", base, file.publicURL);\n      });\n    examples[exampleName] = content;\n  }\n\n  return examples;\n}\n\nfunction getBackends(\n  defaultEmit: string,\n  overrides: Record<string, BackendOverrides>,\n): Record<string, BackendKind> {\n  const backends: Record<string, BackendKind> = {};\n  for (const phase of co_lc.phases) {\n    let doit = (prog: string, emit: string) =>\n      co_lc.compile(prog, phase, emit);\n    let options: [[string, StringOptions]] = [\n      [\"emit\", { value: defaultEmit, options: co_lc.emits }],\n    ];\n\n    let backend: Backend = {\n      title: phase,\n      editorLanguage: overrides[phase]?.editorLanguage ?? 'co_lc',\n      ...shapeBackend(doit, options),\n    };\n\n    if (phase === 'ir') {\n      const evalP = 'eval';\n      let doEmit = (prog: string, emit: string) =>\n        co_lc.compile(prog, evalP, emit);\n      backends[phase] = [backend, {\n        title: evalP,\n        editorLanguage: overrides[phase]?.editorLanguage ?? 'co_lc',\n        ...shapeBackend(doEmit, options),\n      }];\n    } else {\n      backends[phase] = [backend];\n    }\n  }\n  return backends;\n}\n\nconst coLcSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\"let\", \"in\", \"yield\", \"spawn\", \"resume\", \"if\", \"then\", \"else\", \"stat\", \"\\\\\"],\n  symbols: /[*\\+_\\{\\}\\|<>,\\\\?\\->.:=!;\\[\\]+]|(->)/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [/\\d+/, \"number\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/`Pending|`Done/, \"keyword\"],\n      [/[A-Z][a-zA-Z0-9_'\\w$]*/, \"constructor\"],\n      { include: \"@whitespace\" },\n      [/: \\s*/, \"operator\", \"@type\"],\n      [/[()]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/#\\s+[\\^]+$/, \"comment\"],\n      [/#\\s+[\\^]+/, \"comment\", \"@type\"],\n      [/#.*$/, \"comment\"],\n    ],\n    type: [\n      [/\\]$/, \"keyword.type\", \"@popall\"],\n      [/\\]/, \"keyword.type\", \"@pop\"],\n      [/\\[/, \"keyword.type\", \"@push\"],\n      [/\\}$/, \"keyword.type\", \"@popall\"],\n      [/\\}/, \"keyword.type\", \"@pop\"],\n      [/\\{/, \"keyword.type\", \"@push\"],\n      [/,/, \"keyword.type\"],\n      [/;/, \"keyword.type\"],\n      [/[A-z][a-zA-Z]*$/, \"tag\", \"@pop\"],\n      [/[A-z][a-zA-Z]*\\s/, \"tag\", \"@pop\"],\n      [/int/, \"keyword.type\"],\n      [/void/, \"keyword.type\"],\n      [/\\s*$/, \"@whitespace\", \"@pop\"],\n      [/\\s+/, \"@whitespace\"],\n      [/=/, \"default\", \"@pop\"],\n    ],\n  },\n};\n\nconst vmSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\n  ],\n  symbols: /[,;<>\\\\?\\->.:=\\u03BB]+/,\n\n  tokenizer: {\n    root: [\n      // Label definition\n      [/^[.a-zA-Z0-9_$?@].*:/, {token: 'type.identifier'}],\n      // instr\n      [/[a-z][-_a-z0-9]*/, {token: 'keyword', next: '@rest'}],\n      [/[<=]/, {token: 'keyword', next: '@rest'}],\n      [/\\d+/, \"number\"],\n      { include: \"@whitespace\" },\n      [/[{()}]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    rest: [\n        // pop at the beginning of the next line and rematch\n        [/^.*$/, {token: '@rematch', next: '@pop'}],\n\n        // brackets\n        [/[{}<>()[\\]]/, '@brackets'],\n\n        // numbers\n        [/-?\\d+/, 'number'],\n\n        // label reference\n        [/[a-z][-_a-zA-Z]*/, 'type.identifier'],\n\n        // whitespace\n        {include: '@whitespace'},\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(%.*$)/, \"comment\"],\n    ],\n  },\n};\n\nconst languages: Record<\"co_lc\" | \"vm\", LanguageRegistration> = {\n  co_lc: {\n    syntax: coLcSyntax,\n    hover: (m: typeof monaco) => (model: monaco.editor.ITextModel, pos: monaco.Position) => {\n      const program = model.getValue();\n      const hover = co_lc.hover(program, pos.lineNumber, pos.column);\n      if (hover === null) return null;\n      const {\n        info,\n        range: { start, fin },\n      } = hover;\n      return {\n        range: new m.Range(start.line, start.col, fin.line, fin.col),\n        contents: info.map((value) => {\n          return { value };\n        }),\n      };\n    },\n  },\n  vm: {\n    syntax: vmSyntax,\n  },\n};\n\nconst CoLcPlayground = () => { \n  const examples = buildExamples();\n\n  const backends = getBackends('print', {\n    'ir': {\n      editorLanguage: 'vm'\n    }\n  });\n\n  return (\n    <Playground\n    title=\"co_lc Playground\"\n    language=\"co_lc\"\n    source=\"https://github.com/ayazhafiz/plts/tree/base/co_lc\"\n      grammar={`https://github.com/ayazhafiz/plts/blob/base/co_lc/ast_parser.mly`}\n      languageRegistrations={languages}\n    backends={backends}\n    defaultBackend=\"ir\"\n    examples={examples}\n    defaultExample={\"fib\"}\n    />\n  )\n}\nexport default CoLcPlayground;\n"],"names":["languages","co_lc","syntax","defaultToken","keywords","symbols","lower","tokenizer","root","cases","include","whitespace","type","hover","program","model","pos","info","start","fin","range","m","contents","value","vm","token","next","rest","examples","allExamples","useStaticQuery","file","exampleName","React","content","setContent","base","process","fetch","URL","r","console","buildExamples","backends","phase","options","backend","title","editorLanguage","overrides","shapeBackend","prog","evalP","getBackends","language","source","grammar","languageRegistrations","defaultBackend","defaultExample"],"sourceRoot":""}