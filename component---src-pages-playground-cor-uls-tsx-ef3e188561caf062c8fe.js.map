{"version":3,"file":"component---src-pages-playground-cor-uls-tsx-ef3e188561caf062c8fe.js","mappings":"2gCAOA,SAASA,EAAY,EAArB,GAKE,IADA,IACA,EADMC,EAAN,GAD2B,iBAEhBC,EAFgB,QAKrBC,EAAqC,CACvC,CAAC,OAAQ,CAAEC,MAAF,EAAsBD,QAASE,EAAIC,SAE1CC,EAAgB,eAClBC,MADkB,EAElBC,eAAgB,SACbC,EAAAA,EAAAA,KARM,SAACC,EAAD,UACTN,EAAIO,QAAJP,EAAAA,EAAAA,EADS,KAKX,IAKAJ,EAAAA,GAAkB,CAAlBA,IAXF,IAAoBI,EAAIQ,UAAxB,aAAiC,IAajC,OAAOZ,EAGT,IA+CA,EA3CK,SAAC,GAaJ,IAbmD,IAanD,EAbMa,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAY1BC,EAAN,GACA,KAZoBC,EAAAA,EAAAA,IAApB,cAYmBC,QAAnB,sBAA8C,CAAC,IAApCC,EAAmC,QAC5C,GAAIA,EAAAA,aAAAA,SAAAA,IAAAA,EAAJ,KAAmD,CACjD,IAAMC,EAAcD,EAAAA,aAAAA,MAAAA,KAAAA,IAAAA,GAAAA,MAAAA,QAApB,GACA,EAA8BE,EAAAA,SAA9B,IAAOC,EAAP,KAAgBC,EAAhB,KAEAC,MAAM,IAAIC,IAAIN,EAAR,UADOO,0BACbF,MACQ,mBAAOG,EAAP,UADRH,MAEQ,YACJ,OAAOpB,EAAIwB,YAAX,MAHJJ,KAAAA,GAMAR,EAAAA,GAAAA,GAIJ,OACE,qBACET,MAAK,SADP,cAEEsB,SAAQ,OAFV,EAGEC,OAAM,0DAHR,EAIEC,QAAO,4DAJT,cAKEC,sBALF,GAMEhC,SAAUD,EAAYc,EANxB,GAOEoB,eAPF,EAQEjB,SARF,EASEkB,eAAgBC,OAAAA,KAAAA,GAAAA,MC5DtB,EAPoC,SAAC,GAAD,OCHrB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDEH,IAClCC,EAAc,CACZzB,WADY,MAEZC,aAFY,QAGZC,YAAa,W","sources":["webpack://www/./src/components/cor.tsx","webpack://www/./src/pages/playground/cor/uls.tsx","webpack://www/../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import * as React from \"react\";\nimport Playground from \"./playground\";\nimport type { Backend, StringOptions } from \"../common/types\";\nimport { shapeBackend } from \"../common/util\";\nimport * as cor from \"cor\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction getBackends(\n  lang: string,\n  defaultEmit: string\n): Record<string, [Backend]> {\n  const backends: Record<string, [Backend]> = {};\n  for (const phase of cor.phases) {\n    let doit = (prog: string, emit: string) =>\n      cor.compile(prog, lang, phase, emit);\n    let options: [[string, StringOptions]] = [\n      [\"emit\", { value: defaultEmit, options: cor.emits }],\n    ];\n    let backend: Backend = {\n      title: phase,\n      editorLanguage: \"text\",\n      ...shapeBackend(doit, options),\n    };\n    backends[phase] = [backend];\n  }\n  return backends;\n}\n\nconst CorPlayground: React.FC<{\n  experiment: string;\n  defaultPhase: string;\n  defaultEmit: string;\n}> = ({ experiment, defaultPhase, defaultEmit }) => {\n  const allExamples = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"roc\" } }) {\n        nodes {\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `);\n\n  const examples: Record<string, string> = {};\n  for (const file of allExamples.allFile.nodes) {\n    if (file.relativePath.includes(`/${experiment}/`)) {\n      const exampleName = file.relativePath.split(\"/\").at(-1).split(\".roc\")[0];\n      const [content, setContent] = React.useState(\"\");\n      const base = process.env[\"HOST\"];\n      fetch(new URL(file.publicURL, base))\n        .then((r) => r.text())\n        .then((s) => {\n          return cor.userProgram(s);\n        })\n        .then(setContent);\n      examples[exampleName] = content;\n    }\n  }\n\n  return (\n    <Playground\n      title={`cor/${experiment} Playground`}\n      language={`cor/${experiment}`}\n      source={`https://github.com/ayazhafiz/cor/tree/base/experiments/${experiment}`}\n      grammar={`https://github.com/ayazhafiz/cor/blob/base/experiments/${experiment}/parser.mly`}\n      languageRegistrations={{}}\n      backends={getBackends(experiment, defaultEmit)}\n      defaultBackend={defaultPhase}\n      examples={examples}\n      defaultExample={Object.keys(examples)[0]}\n    />\n  );\n};\n\nexport default CorPlayground;\n","import * as React from \"react\";\nimport CorPlayground from \"../../../components/cor\";\n\nconst UlsPlayground: React.FC<{}> = ({}) =>\n  CorPlayground({\n    experiment: \"uls\",\n    defaultPhase: \"solve\",\n    defaultEmit: \"elab\",\n  });\n\nexport default UlsPlayground;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["getBackends","backends","phase","options","value","cor","emits","backend","title","editorLanguage","shapeBackend","prog","compile","phases","experiment","defaultPhase","defaultEmit","examples","useStaticQuery","allExamples","file","exampleName","React","content","setContent","fetch","URL","process","r","userProgram","language","source","grammar","languageRegistrations","defaultBackend","defaultExample","Object","obj","TypeError","CorPlayground"],"sourceRoot":""}