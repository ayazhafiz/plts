{"version":3,"file":"component---src-pages-playground-cor-uls-tsx-7f8d97de386fca36ed63.js","mappings":"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","sources":["webpack://www/./src/components/cor.tsx","webpack://www/./src/pages/playground/cor/uls.tsx","webpack://www/../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"./playground\";\nimport type {\n  Backend,\n  LanguageRegistration,\n  StringOptions,\n} from \"../common/types\";\nimport { shapeBackend } from \"../common/util\";\nimport * as cor from \"cor\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction getBackends(\n  lang: string,\n  defaultEmit: string\n): Record<string, [Backend]> {\n  const backends: Record<string, [Backend]> = {};\n  for (const phase of cor.phases) {\n    let doit = (prog: string, emit: string) =>\n      cor.compile(prog, lang, phase, emit);\n    let options: [[string, StringOptions]] = [\n      [\"emit\", { value: defaultEmit, options: cor.emits }],\n    ];\n    let backend: Backend = {\n      title: phase,\n      editorLanguage: lang,\n      ...shapeBackend(doit, options),\n    };\n    backends[phase] = [backend];\n  }\n  return backends;\n}\n\nfunction createHover(lang: string): LanguageRegistration[\"hover\"] {\n  return (m: typeof monaco) =>\n    (model: monaco.editor.ITextModel, pos: monaco.Position) => {\n      const program = model.getValue();\n      const hover = cor.hover(program, lang, pos.lineNumber, pos.column);\n      const {\n        info,\n        range: { start, fin },\n      } = hover;\n      return {\n        range: new m.Range(start.line, start.col, fin.line, fin.col),\n        contents: info.map((value) => {\n          return { value };\n        }),\n      };\n    };\n}\n\nconst CorPlayground: React.FC<{\n  experiment: string;\n  defaultPhase: string;\n  defaultEmit: string;\n  languageRegistrations?: Record<string, LanguageRegistration>;\n}> = ({\n  experiment,\n  defaultPhase,\n  defaultEmit,\n  languageRegistrations = {},\n}) => {\n  if (languageRegistrations[experiment]) {\n    languageRegistrations[experiment].hover = createHover(experiment);\n  }\n\n  const allExamples = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"roc\" } }) {\n        nodes {\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `);\n\n  const examples: Record<string, string> = {};\n  for (const file of allExamples.allFile.nodes) {\n    if (file.relativePath.includes(`/${experiment}/`)) {\n      const exampleName = file.relativePath.split(\"/\").at(-1).split(\".roc\")[0];\n      const [content, setContent] = React.useState(\"\");\n      const base = process.env[\"HOST\"];\n      fetch(new URL(file.publicURL, base))\n        .then((r) => r.text())\n        .then((s) => {\n          return cor.userProgram(s);\n        })\n        .then(setContent);\n      examples[exampleName] = content;\n    }\n  }\n\n  return (\n    <Playground\n      title={`cor/${experiment} Playground`}\n      language={experiment}\n      source={`https://github.com/ayazhafiz/cor/tree/base/experiments/${experiment}`}\n      grammar={`https://github.com/ayazhafiz/cor/blob/base/experiments/${experiment}/parser.mly`}\n      languageRegistrations={languageRegistrations}\n      backends={getBackends(experiment, defaultEmit)}\n      defaultBackend={defaultPhase}\n      examples={examples}\n      defaultExample={Object.keys(examples)[0]}\n    />\n  );\n};\n\nexport default CorPlayground;\n","import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport { LanguageRegistration } from \"../../../common/types\";\nimport CorPlayground from \"../../../components/cor\";\n\nconst uls = \"uls\";\n\nconst ulsSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\"entry\", \"let\", \"in\", \"choice\", \"\\\\\"],\n  symbols: /[_<>\\\\?\\->.:=!;\\[\\]+]|(->)/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [/proto\\s*/, \"keyword\", \"@proto\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/[A-Z][a-zA-Z0-9_'\\w$]*/, \"constructor\"],\n      { include: \"@whitespace\" },\n      [/[()]/, \"@brackets\"],\n      [/`\\d+/, \"tag\"],\n      [/~\\d+/, \"tag\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    proto: [[/@lower/, \"identifier\", \"@protoArg\"]],\n    protoArg: [\n      [/@lower/, \"type\", \"@protoArg\"],\n      [/:/, \"operator\", \"@type\"],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/#\\s+[\\^]+$/, \"comment\"],\n      [/#\\s+[\\^]+/, \"comment\", \"@type\"],\n      [/#.*$/, \"comment\"],\n    ],\n    type: [\n      [/\\(\\)$/, \"keyword.type\", \"@popall\"],\n      [/\\(\\)/, \"keyword.type\"],\n      [/->/, \"operator\"],\n      [/-\\[/, \"type\"],\n      [/\\]->/, \"type\"],\n      [/(`\\d+)/, [\"tag\"]],\n      [\n        /(~\\d+)(:)([a-z]+)(:)([a-z][a-zA-Z0-9]*)/,\n        [\"tag\", \"operator\", \"type\", \"operator\", \"identifier\"],\n      ],\n      [/[a-zA-Z][a-zA-Z0-9_']*$/, \"type\", \"@popall\"],\n      [/[a-zA-Z][a-zA-Z0-9_']*/, \"type\"],\n      [/[()\\[\\]]$/, \"@brackets\", \"@popall\"],\n      [/[()\\[\\]]/, \"@brackets\"],\n      [/[ \\t]*$/, \"@whitespace\", \"@popall\"],\n      [/[ \\t]+/, \"@whitespace\"],\n    ],\n  },\n};\n\nconst languageRegistrations: Record<typeof uls, LanguageRegistration> = {\n  [uls]: {\n    syntax: ulsSyntax,\n  },\n};\n\nconst UlsPlayground: React.FC<{}> = ({}) =>\n  CorPlayground({\n    experiment: uls,\n    defaultPhase: \"solve\",\n    defaultEmit: \"elab\",\n    languageRegistrations,\n  });\n\nexport default UlsPlayground;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["getBackends","backends","phase","options","value","cor","emits","backend","title","editorLanguage","lang","shapeBackend","prog","compile","phases","experiment","defaultPhase","defaultEmit","languageRegistrations","program","model","hover","pos","info","start","fin","range","m","contents","examples","useStaticQuery","allExamples","file","exampleName","React","content","setContent","fetch","URL","process","r","userProgram","language","source","grammar","defaultBackend","defaultExample","Object","syntax","defaultToken","keywords","symbols","lower","tokenizer","root","cases","include","proto","protoArg","whitespace","type","obj","TypeError","CorPlayground"],"sourceRoot":""}