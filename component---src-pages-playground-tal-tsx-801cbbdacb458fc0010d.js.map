{"version":3,"file":"component---src-pages-playground-tal-tsx-801cbbdacb458fc0010d.js","mappings":"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","sources":["webpack://www/./src/common/syntax/asm.ts","webpack://www/./src/pages/playground/tal.tsx"],"sourcesContent":["// Stolen from:\n// https://github.com/compiler-explorer/compiler-explorer/blob/9904a6ee51f765e9d37c7df9ee543ad834f51239/static/modes/asm-mode.ts\n//\n// Copyright (c) 2012, Compiler Explorer Authors\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//     * Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport type * as monaco from 'monaco-editor';\n\nexport const ASM_SYNTAX: monaco.languages.IMonarchLanguage = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n\n    // C# style strings\n    escapes:\n        /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n    registers:\n        /%?\\b(r[0-9]+[dbw]?|([er]?([abcd][xhl]|cs|fs|ds|ss|sp|bp|ip|sil?|dil?))|[xyz]mm[0-9]+|sp|fp|lr)\\b/,\n\n    intelOperators: /PTR|(D|Q|[XYZ]MM)?WORD/,\n\n    tokenizer: {\n        root: [\n            // Error document\n            [/^<.*>$/, {token: 'annotation'}],\n            // Label definition\n            [/^[.a-zA-Z0-9_$?@].*:/, {token: 'type.identifier'}],\n            // Label definition (quoted)\n            [/^\"([^\"\\\\]|\\\\.)*\":/, {token: 'type.identifier'}],\n            // Label definition (ARM style)\n            [/^\\s*[|][^|]*[|]/, {token: 'type.identifier'}],\n            // Label definition (CL style)\n            [\n                /^\\s*[.a-zA-Z0-9_$|]*\\s+(PROC|ENDP|DB|DD)/,\n                {token: 'type.identifier'}\n            ],\n            // Constant definition\n            [/^[.a-zA-Z0-9_$?@][^=]*=/, {token: 'type.identifier'}],\n            // opcode\n            [/[.a-zA-Z_][.a-zA-Z_0-9]*/, {token: 'keyword', next: '@rest'}],\n            // braces and parentheses at the start of the line (e.g. nvcc\n            // output)\n            [/[(){}]/, {token: 'operator', next: '@rest'}],\n\n            // whitespace\n            {include: '@whitespace'},\n        ],\n\n        rest: [\n            // pop at the beginning of the next line and rematch\n            [/^.*$/, {token: '@rematch', next: '@pop'}],\n\n            [/@registers/, 'variable.predefined'],\n            [/@intelOperators/, 'annotation'],\n            // brackets\n            [/[{}<>()[\\]]/, '@brackets'],\n\n            // ARM-style label reference\n            [/[|][^|]*[|]*/, 'type.identifier'],\n\n            // numbers\n            [/\\d*\\.\\d+([eE][-+]?\\d+)?/, 'number.float'],\n            [/([$]|0[xX])[0-9a-fA-F]+/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // ARM-style immediate numbers (which otherwise look like\n            // comments)\n            [/#-?\\d+/, 'number'],\n\n            // operators\n            [/[-+,*/!:&{}()]/, 'operator'],\n\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],  // non-terminated string\n            [/\"/, {token: 'string.quote', bracket: '@open', next: '@string'}],\n\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid'],\n\n            // Assume anything else is a label reference\n            [/%?[.?_$a-zA-Z@][.?_$a-zA-Z0-9@]*/, 'type.identifier'],\n\n            // whitespace\n            {include: '@whitespace'},\n        ],\n\n        comment: [\n            [/[^/*]+/, 'comment'],\n            [/\\/\\*/, 'comment', '@push'],  // nested comment\n            ['\\\\*/', 'comment', '@pop'],\n            [/[/*]/, 'comment'],\n        ],\n\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, {token: 'string.quote', bracket: '@close', next: '@pop'}],\n        ],\n\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n            [/[#;\\\\@].*$/, 'comment'],\n        ],\n    },\n};\n","import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"../../components/playground\";\nimport type {Backend} from \"../../common/types\";\nimport {promisify} from \"../../common/util\";\nimport {ASM_SYNTAX} from \"../../common/syntax/asm\";\nimport * as tal from \"tal\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst examples = {\n  Fibonacci: `\nlet $fib =\n  (fix fib (n: int): int.\n    if0 n then 0\n    else if0 (n - 1) then 1   # n = 1\n    else fib (n - 1) + fib (n - 2)) in\nlet $twice =\n  (Î›a. fix inf(f: a->a): a->a.\n       fix inx(x: a): a.\n         f (f x)) in\nlet $double =\n  (fix double(n: int): int.\n    ($twice<int>) (fix inx(x: int): int. x + n) 0) in\n$double ($fib 8)\n`.trim(),\n};\n\nconst backends: {\n  [K in \"TAL\" | \"x86\"]: [Backend, Backend];\n} = {\n  TAL: [\n    {\n      title: \"TAL\",\n      do: promisify(tal.talCompile),\n      options: [],\n      editorLanguage: \"tal\",\n    },\n    {\n      title: \"TAL Execution\",\n      do: promisify(tal.talEval),\n      options: [],\n      editorLanguage: \"tal\",\n    },\n  ],\n  x86: [\n    {\n      title: \"x86\",\n      do: promisify(tal.x86Compile),\n      options: [],\n      info: [\n        [\n          \"Codegen info\",\n          <ReactMarkdown key={1}>\n            Register allocation is based on the [Linear Scan Register\n            Allocation](http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf)\n            of Poletto and Sarkar (1999). We number instructions as they appear\n            in the TAL IR, not in the order they would execute. This poor\n            ordering is simple to implement but results in many spills, as can\n            be seen in the generated code. The large number of spills demands\n            multiple passes of register allocation, slowing down compilation\n            time. Spilled variables live at the very top of the stack, with\n            space allocated for them before any code is executed.\n          </ReactMarkdown>,\n        ],\n      ],\n      editorLanguage: \"asm\",\n    },\n    {\n      title: \"x86 Emulation\",\n      do: promisify(tal.x86Emulate),\n      options: [],\n      editorLanguage: \"tal\",\n    },\n  ],\n};\n\nconst talSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  registers: /%?\\b(r[0-9a-z]+)\\b/,\n\n  keywords: [\"pack\", \"code\", \"halt\", \"as\"],\n\n  tokenizer: {\n    root: [\n      // Error document\n      [/^<.*>$/, {token: \"annotation\"}],\n      // Label definition\n      [/^[.a-zA-Z0-9_$?@].*:/, {token: \"type.identifier\"}],\n      // Constant definition\n      [/^[.a-zA-Z0-9_$?@][^=]*=/, {token: \"type.identifier\"}],\n      // opcode\n      [/[.a-zA-Z_][.a-zA-Z_0-9']*/, {token: \"keyword\", next: \"@rest\"}],\n      [/[(){}[\\]\\-<>]/, {token: \"operator\", next: \"@rest\"}],\n      [/\\d+/, \"number\"],\n\n      // whitespace\n      {include: \"@whitespace\"},\n    ],\n\n    rest: [\n      // pop at the beginning of the next line and rematch\n      [/^.*$/, {token: \"@rematch\", next: \"@pop\"}],\n\n      [/@registers/, \"variable.predefined\"],\n\n      [/\\d+/, \"number\"],\n\n      [/[,():,[\\]\\-<>âˆƒâˆ€+]/, \"operator\"],\n      // Assume anything else is a label reference\n      [\n        /%?[.?_$a-zA-Z@][.?_$a-zA-Z0-9'@]*/,\n        {cases: {\"@keywords\": \"keyword\", \"@default\": \"type.identifier\"}},\n      ],\n\n      // whitespace\n      {include: \"@whitespace\"},\n    ],\n\n    comment: [\n      [/[^/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"], // nested comment\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[/*]/, \"comment\"],\n    ],\n\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"],\n      [/[#;\\\\@].*$/, \"comment\"],\n    ],\n  },\n};\n\nconst systemFSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n  keywords: [\"fix\", \"if0\", \"then\", \"else\", \"Î›\", \"let\", \"in\"],\n\n  typeKeywords: [\"int\", \"âˆ€\"],\n\n  symbols: /[=><!~?:&|+\\-*/^%.,]+/,\n  tokenizer: {\n    root: [\n      [\n        /[a-z_A-Z][\\w0-9$]*|[âˆ€Î›]/,\n        {\n          cases: {\n            \"@typeKeywords\": \"keyword\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      {include: \"@whitespace\"},\n      [/[{}()[\\]]/, \"@brackets\"],\n\n      [/[%$][a-z_A-Z0-9]*/, \"annotation\"],\n      [/@symbols/, \"operator\"],\n      // numbers\n      [/\\d+/, \"number\"],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(^#.*$)/, \"comment\"],\n    ],\n  },\n};\n\nconst languages = {\n  systemF: {\n    syntax: systemFSyntax,\n  },\n  tal: {\n    syntax: talSyntax,\n  },\n  asm: {\n    syntax: ASM_SYNTAX,\n  },\n};\n\nconst FtPlayground = () => (\n  <Playground\n    title=\"TAL Playground\"\n    language=\"systemF\"\n    source=\"https://github.com/ayazhafiz/plts/tree/base/TAL\"\n    grammar=\"https://github.com/ayazhafiz/plts/blob/base/TAL/parser.mly\"\n    languageRegistrations={languages}\n    backends={backends}\n    defaultBackend=\"TAL\"\n    examples={examples}\n    defaultExample=\"Fibonacci\"\n  />\n);\nexport default FtPlayground;\n"],"names":["ASM_SYNTAX","defaultToken","escapes","registers","intelOperators","tokenizer","root","token","next","include","rest","bracket","comment","string","whitespace","examples","Fibonacci","trim","backends","TAL","title","do","promisify","tal","options","editorLanguage","x86","info","React","ReactMarkdown","key","languages","systemF","syntax","keywords","typeKeywords","symbols","cases","asm","FtPlayground","Playground","language","source","grammar","languageRegistrations","defaultBackend","defaultExample"],"sourceRoot":""}