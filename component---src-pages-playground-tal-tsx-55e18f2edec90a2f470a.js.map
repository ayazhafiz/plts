{"version":3,"file":"component---src-pages-playground-tal-tsx-55e18f2edec90a2f470a.js","mappings":"mKAQMA,EAAW,CACfC,UAAW,gWAcXC,QAGIC,EAEF,CACFC,IAAK,CACH,CACEC,MAAO,MACPC,IAAIC,EAAAA,EAAAA,IAAUC,EAAAA,YACdC,QAAS,GACTC,eAAgB,OAElB,CACEL,MAAO,gBACPC,IAAIC,EAAAA,EAAAA,IAAUC,EAAAA,SACdC,QAAS,GACTC,eAAgB,QAGpBC,IAAK,CACH,CACEN,MAAO,MACPC,IAAIC,EAAAA,EAAAA,IAAUC,EAAAA,YACdC,QAAS,GACTG,KAAM,CACJ,CACE,eACA,gBAAC,IAAD,CACEC,SAAU,mlBAWpBX,WAIIQ,eAAgB,OAElB,CACEL,MAAO,gBACPC,IAAIC,EAAAA,EAAAA,IAAUC,EAAAA,YACdC,QAAS,GACTC,eAAgB,SAkGhBI,EAAY,CAChBC,QAAS,CACPC,OApCqD,CACvDC,aAAc,UACdC,SAAU,CAAC,MAAO,MAAO,OAAQ,OAAQ,IAAK,MAAO,MAErDC,aAAc,CAAC,MAAO,KAEtBC,QAAS,0BACTC,UAAW,CACTC,KAAM,CACJ,CACE,0BACA,CACEC,MAAO,CACL,gBAAiB,UACjB,YAAa,UACb,WAAY,gBAIlB,CAAEC,QAAS,eACX,CAAC,aAAc,aAEf,CAAC,oBAAqB,cACtB,CAAC,WAAY,YAEb,CAAC,MAAO,WAEVC,WAAY,CACV,CAAC,aAAc,SACf,CAAC,UAAW,eAShBjB,IAAK,CACHQ,OAlGiD,CACnDC,aAAc,UAEdS,UAAW,qBAEXR,SAAU,CAAC,OAAQ,OAAQ,OAAQ,MAEnCG,UAAW,CACTC,KAAM,CAEJ,CAAC,SAAU,CAAEK,MAAO,eAEpB,CAAC,uBAAwB,CAAEA,MAAO,oBAElC,CAAC,0BAA2B,CAAEA,MAAO,oBAErC,CAAC,4BAA6B,CAAEA,MAAO,UAAWC,KAAM,UACxD,CAAC,iBAAkB,CAAED,MAAO,WAAYC,KAAM,UAC9C,CAAC,MAAO,UAGR,CAAEJ,QAAS,gBAGbK,KAAM,CAEJ,CAAC,OAAQ,CAAEF,MAAO,WAAYC,KAAM,SAEpC,CAAC,aAAc,uBAEf,CAAC,MAAO,UAER,CAAC,uBAAwB,YAEzB,CACE,oCACA,CAAEL,MAAO,CAAE,YAAa,UAAW,WAAY,qBAIjD,CAAEC,QAAS,gBAGbM,QAAS,CACP,CAAC,SAAU,WACX,CAAC,OAAQ,UAAW,SACpB,CAAC,OAAQ,UAAW,QACpB,CAAC,OAAQ,YAGXL,WAAY,CACV,CAAC,aAAc,SACf,CAAC,OAAQ,UAAW,YACpB,CAAC,UAAW,WACZ,CAAC,aAAc,gBA6DrB,UAbqB,kBACnB,gBAAC,IAAD,CACEpB,MAAM,iBACN0B,SAAS,UACTC,OAAO,kDACPC,QAAQ,6DACRC,sBAAuBpB,EACvBX,SAAUA,EACVgC,eAAe,MACfnC,SAAUA,EACVoC,eAAe,gB","sources":["webpack://www/./src/pages/playground/tal.tsx"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"../../components/playground\";\nimport type { Backend } from \"../../common/types\";\nimport { promisify } from \"../../common/util\";\nimport * as tal from \"tal\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst examples = {\n  Fibonacci: `\nlet $fib =\n  (fix fib (n: int): int.\n    if0 n then 0\n    else if0 (n - 1) then 1   # n = 1\n    else fib (n - 1) + fib (n - 2)) in\nlet $twice =\n  (Λa. fix inf(f: a->a): a->a.\n       fix inx(x: a): a.\n         f (f x)) in\nlet $double =\n  (fix double(n: int): int.\n    ($twice<int>) (fix inx(x: int): int. x + n) 0) in\n$double ($fib 8)\n`.trim(),\n};\n\nconst backends: {\n  [K in \"TAL\" | \"x86\"]: [Backend, Backend];\n} = {\n  TAL: [\n    {\n      title: \"TAL\",\n      do: promisify(tal.talCompile),\n      options: [],\n      editorLanguage: \"tal\",\n    },\n    {\n      title: \"TAL Execution\",\n      do: promisify(tal.talEval),\n      options: [],\n      editorLanguage: \"tal\",\n    },\n  ],\n  x86: [\n    {\n      title: \"x86\",\n      do: promisify(tal.x86Compile),\n      options: [],\n      info: [\n        [\n          \"Codegen info\",\n          <ReactMarkdown\n            children={`\nRegister allocation is based on the [Linear Scan Register Allocation](http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf)\nof Poletto and Sarkar (1999). We number instructions as they appear in the TAL\nIR, not in the order they would execute.\n\nThis poor ordering is simple to implement but results in many spills, as\ncan be seen in the generated code. The large number of spills demands multiple\npasses of register allocation, slowing down compilation time.\n\nSpilled variables live at the very top of the stack, with space allocated for\nthem before any code is executed.\n`.trim()}\n          />,\n        ],\n      ],\n      editorLanguage: \"tal\",\n    },\n    {\n      title: \"x86 Emulation\",\n      do: promisify(tal.x86Emulate),\n      options: [],\n      editorLanguage: \"tal\",\n    },\n  ],\n};\n\nconst talSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  registers: /%?\\b(r[0-9a-z]+)\\b/,\n\n  keywords: [\"pack\", \"code\", \"halt\", \"as\"],\n\n  tokenizer: {\n    root: [\n      // Error document\n      [/^<.*>$/, { token: \"annotation\" }],\n      // Label definition\n      [/^[.a-zA-Z0-9_$?@].*:/, { token: \"type.identifier\" }],\n      // Constant definition\n      [/^[.a-zA-Z0-9_$?@][^=]*=/, { token: \"type.identifier\" }],\n      // opcode\n      [/[.a-zA-Z_][.a-zA-Z_0-9']*/, { token: \"keyword\", next: \"@rest\" }],\n      [/[(){}\\[\\]\\-<>]/, { token: \"operator\", next: \"@rest\" }],\n      [/\\d+/, \"number\"],\n\n      // whitespace\n      { include: \"@whitespace\" },\n    ],\n\n    rest: [\n      // pop at the beginning of the next line and rematch\n      [/^.*$/, { token: \"@rematch\", next: \"@pop\" }],\n\n      [/@registers/, \"variable.predefined\"],\n\n      [/\\d+/, \"number\"],\n\n      [/[,\\(\\):,\\[\\]\\-<>∃∀+]/, \"operator\"],\n      // Assume anything else is a label reference\n      [\n        /%?[.?_$a-zA-Z@][.?_$a-zA-Z0-9'@]*/,\n        { cases: { \"@keywords\": \"keyword\", \"@default\": \"type.identifier\" } },\n      ],\n\n      // whitespace\n      { include: \"@whitespace\" },\n    ],\n\n    comment: [\n      [/[^/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"], // nested comment\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[/*]/, \"comment\"],\n    ],\n\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"],\n      [/[#;\\\\@].*$/, \"comment\"],\n    ],\n  },\n};\n\nconst systemFSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n  keywords: [\"fix\", \"if0\", \"then\", \"else\", \"Λ\", \"let\", \"in\"],\n\n  typeKeywords: [\"int\", \"∀\"],\n\n  symbols: /[=><!~?:&|+\\-*\\/\\^%.,]+/,\n  tokenizer: {\n    root: [\n      [\n        /[a-z_A-Z][\\w0-9$]*|[∀Λ]/,\n        {\n          cases: {\n            \"@typeKeywords\": \"keyword\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n\n      [/[%$][a-z_A-Z0-9]*/, \"annotation\"],\n      [/@symbols/, \"operator\"],\n      // numbers\n      [/\\d+/, \"number\"],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(^#.*$)/, \"comment\"],\n    ],\n  },\n};\n\nconst languages = {\n  systemF: {\n    syntax: systemFSyntax,\n  },\n  tal: {\n    syntax: talSyntax,\n  },\n};\n\nconst FtPlayground = () => (\n  <Playground\n    title=\"TAL Playground\"\n    language=\"systemF\"\n    source=\"https://github.com/ayazhafiz/plts/tree/base/TAL\"\n    grammar=\"https://github.com/ayazhafiz/plts/blob/base/TAL/parser.mly\"\n    languageRegistrations={languages}\n    backends={backends}\n    defaultBackend=\"TAL\"\n    examples={examples}\n    defaultExample=\"Fibonacci\"\n  />\n);\nexport default FtPlayground;\n"],"names":["examples","Fibonacci","trim","backends","TAL","title","do","promisify","tal","options","editorLanguage","x86","info","children","languages","systemF","syntax","defaultToken","keywords","typeKeywords","symbols","tokenizer","root","cases","include","whitespace","registers","token","next","rest","comment","language","source","grammar","languageRegistrations","defaultBackend","defaultExample"],"sourceRoot":""}