# +ir -print
# +eval -print
let child = \n ->
  yield;
  let n = n + 1 in
  yield;
  let n = n + 1 in
  yield;
  let n = n + 1 in
  yield;
  let n = n + 1 in
  yield;
  n
in
let rec exec = \fiber ->
  stat fiber
  | `Pending -> exec (resume fiber)
  | `Done n -> n
in
let child = spawn (child 10) in
exec child

> +ir -print
> exec: {
> % Stack relative to frame pointer:
> %   -8  #return
> %   -7  fiber.stkdirty
> %   -6  fiber.stkidx
> %   -5  fiber.return
> %   -4  fiber.bit
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> %    0  n
> exec:
>   sp-add 1
> start2:
>   push fp[-7]
>   push fp[-6]
>   push fp[-5]
>   push fp[-4]
>   jmpz pending
> done:
>   store-into fp[0]
>   sp-sub 2
>   push fp[0]
>   store-into fp[-8]
>   jmp join
> pending:
>   sp-sub 3
>   sp-add 1
>   push fp[-7]
>   push fp[-6]
>   push fp[-5]
>   push fp[-4]
>   resume 1
>   push &exec
>   call
>   sp-sub 4
>   store-into fp[-8]
>   jmp join
> join:
>   ret
> }
> 
> child: {
> % Stack relative to frame pointer:
> %   -5  #return
> %   -4  n
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> %    0  n
> %    1  n
> %    2  n
> %    3  n
> child:
>   sp-add 4
> start1:
>   yield
>   push 1
>   push fp[-4]
>   add
>   store-into fp[0]
>   yield
>   push 1
>   push fp[0]
>   add
>   store-into fp[1]
>   yield
>   push 1
>   push fp[1]
>   add
>   store-into fp[2]
>   yield
>   push 1
>   push fp[2]
>   add
>   store-into fp[3]
>   yield
>   push fp[3]
>   store-into fp[-5]
>   ret
> }
> 
> spawn_wrapper: {
> % Stack relative to frame pointer:
> %   -4  #return
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> spawn_wrapper:
>   sp-add 0
> start3:
>   sp-add 1
>   push 10
>   push &child
>   call
>   sp-sub 1
>   store-into fp[-4]
>   ret
> }
> 
> @main: {
> % Stack relative to frame pointer:
> %   -4  #return
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> %    0  child.stkdirty
> %    1  child.stkidx
> %    2  child.return
> %    3  child.bit
> @main:
>   sp-add 4
> start:
>   push &spawn_wrapper
>   spawn 0 1
>   store-into fp[3]
>   store-into fp[2]
>   store-into fp[1]
>   store-into fp[0]
>   sp-add 1
>   push fp[0]
>   push fp[1]
>   push fp[2]
>   push fp[3]
>   push &exec
>   call
>   sp-sub 4
>   store-into fp[-4]
>   ret
> }

> +eval -print
> 14
