# +solve -elab
# +ir -print
# +eval -print
let add = \m -> \n -> m + n in
#   ^^^         ^^^^^^^^^^^
add 5 6

> +solve -elab
> let add = \m -> \n -> m + n in
> #               ^^^^^^^^^^^ int -[lam {m}]-> int
> #   ^^^ int -[add {}]-> int -[lam {m}]-> int
> add 5 6
> 

> +ir -print
> lam: {
> % Stack relative to frame pointer:
> %   -6  #return
> %   -5  n
> %   -4  m
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> lam:
>   sp-add 0
> start2:
>   push fp[-5]
>   push fp[-4]
>   add
>   store-into fp[-6]
>   ret
> }
> 
> add: {
> % Stack relative to frame pointer:
> %   -6  #return
> %   -5  
> %   -4  m
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> add:
>   sp-add 0
> start1:
>   push fp[-4]
>   store-into fp[-6]
>   push &lam
>   store-into fp[-5]
>   ret
> }
> 
> @main: {
> % Stack relative to frame pointer:
> %   -4  #return
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> @main:
>   sp-add 0
> start:
>   sp-add 1
>   push 6
>   sp-add 2
>   push 5
>   push &add
>   call
>   sp-sub 1
>   call
>   sp-sub 2
>   store-into fp[-4]
>   ret
> }

> +eval -print
> 11