# +solve -elab
# +ir -print
let rec fib = \n ->
#       ^^^
  yield;
  if n < 2
  then n
  else (fib (n - 1)) + (fib (n - 2))
in

let rec exec = \state ->
#       ^^^^
  stat state.0
#      ^^^^^
  | `Pending ->
    let fib1 = resume state.0 in
#                     ^^^^^^^
    exec {fib1, 0, state.2 + 1}
  | `Done n -> {state.0, n, state.2}

in
let runFib = spawn (fib 28) in
let result = exec {runFib, 0, 0} in
#   ^^^^^^
result

> +solve -elab
> let rec fib = \n ->
> #       ^^^ int -> int
>   yield;
>   if n < 2
>   then n
>   else (fib (n - 1)) + (fib (n - 2))
> in
> 
> let rec exec = \state ->
> #       ^^^^ {Fiber int; int; int} -> {Fiber int; int; int}
>   stat state.0
> #      ^^^^^ {Fiber int; int; int}
>   | `Pending ->
>     let fib1 = resume state.0 in
> #                     ^^^^^^^ Fiber int
>     exec {fib1, 0, state.2 + 1}
>   | `Done n -> {state.0, n, state.2}
> 
> in
> let runFib = spawn (fib 28) in
> let result = exec {runFib, 0, 0} in
> #   ^^^^^^ {Fiber int; int; int}
> result
> 

> +ir -print
> exec: {
> % Stack relative to frame pointer:
> %   -9  state.2
> %   -8  state.1
> %   -7  state.0.stkdirty
> %   -6  state.0.stkidx
> %   -5  state.0.return
> %   -4  state.0.bit
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> %    0  #return.2
> %    1  #return.1
> %    2  #return.0.stkdirty
> %    3  #return.0.stkidx
> %    4  #return.0.return
> %    5  #return.0.bit
> %    6  n
> %    7  fib1.stkdirty
> %    8  fib1.stkidx
> %    9  fib1.return
> %   10  fib1.bit
> exec:
>   sp-add 11
> start2:
>   push fp[-4]
>   push fp[-5]
>   push fp[-6]
>   push fp[-7]
>   jmpz pending
> done:
>   store-into fp[6] 
>   push fp[-9]
>   store-into fp[0] 
>   push fp[6]
>   store-into fp[1] 
>   push fp[-4]
>   push fp[-5]
>   push fp[-6]
>   push fp[-7]
>   store-into fp[2] 
>   store-into fp[3] 
>   store-into fp[4] 
>   store-into fp[5] 
>   jmp join1
> pending:
>   push fp[-4]
>   push fp[-5]
>   push fp[-6]
>   push fp[-7]
>   resume 1
>   store-into fp[7] 
>   store-into fp[8] 
>   store-into fp[9] 
>   store-into fp[10] 
>   push fp[-9]
>   push 1
>   add
>   push 0
>   push fp[10]
>   push fp[9]
>   push fp[8]
>   push fp[7]
>   push &exec
>   call
>   store-into fp[0] 
>   store-into fp[1] 
>   store-into fp[2] 
>   store-into fp[3] 
>   store-into fp[4] 
>   store-into fp[5] 
>   jmp join1
> join1:
>   ret 6
> }
> 
> fib: {
> % Stack relative to frame pointer:
> %   -4  n
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> %    0  #return
> fib:
>   sp-add 1
> start1:
>   yield
>   push fp[-4]
>   push 2
>   <
>   jmpz else
> then:
>   push fp[-4]
>   store-into fp[0] 
>   jmp join
> else:
>   push fp[-4]
>   push 1
>   sub
>   push &fib
>   call
>   push fp[-4]
>   push 2
>   sub
>   push &fib
>   call
>   add
>   store-into fp[0] 
>   jmp join
> join:
>   ret 1
> }
> 
> spawn_wrapper: {
> % Stack relative to frame pointer:
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> %    0  #return
> spawn_wrapper:
>   sp-add 1
> start3:
>   push 28
>   push &fib
>   call
>   store-into fp[0] 
>   ret 1
> }
> 
> @main: {
> % Stack relative to frame pointer:
> %   -3  @old_pc
> %   -2  @old_fp
> %   -1  @old_sp
> %    0  #return.2
> %    1  #return.1
> %    2  #return.0.stkdirty
> %    3  #return.0.stkidx
> %    4  #return.0.return
> %    5  #return.0.bit
> %    6  fib
> %    7  exec
> %    8  runFib.stkdirty
> %    9  runFib.stkidx
> %   10  runFib.return
> %   11  runFib.bit
> %   12  result.2
> %   13  result.1
> %   14  result.0.stkdirty
> %   15  result.0.stkidx
> %   16  result.0.return
> %   17  result.0.bit
> @main:
>   sp-add 18
> start:
>   push &fib
>   store-into fp[6] 
>   push &exec
>   store-into fp[7] 
>   push &spawn_wrapper
>   store-into fp[8] 
>   push 0
>   push 0
>   push fp[11]
>   push fp[10]
>   push fp[9]
>   push fp[8]
>   push &exec
>   call
>   store-into fp[12] 
>   store-into fp[13] 
>   store-into fp[14] 
>   store-into fp[15] 
>   store-into fp[16] 
>   store-into fp[17] 
>   push fp[17]
>   push fp[16]
>   push fp[15]
>   push fp[14]
>   push fp[13]
>   push fp[12]
>   store-into fp[0] 
>   store-into fp[1] 
>   store-into fp[2] 
>   store-into fp[3] 
>   store-into fp[4] 
>   store-into fp[5] 
>   ret 6
> }