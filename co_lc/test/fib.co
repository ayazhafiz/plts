# +solve -elab
# +ir -print
# +eval -print
let rec fib = \n ->
#       ^^^
  yield;
  if n < 2
  then n
  else (fib (n - 1)) + (fib (n - 2))
in

let rec exec = \state ->
#       ^^^^
  stat state.0
#      ^^^^^
  | `Pending ->
    let fib1 = resume state.0 in
#                     ^^^^^^^
    exec {fib1, 0, state.2 + 1}
  | `Done n -> {state.0, n, state.2}

in
let runFib = spawn (fib 20) in
let result = exec {runFib, 0, 0} in
#   ^^^^^^
{result.1, result.2}

> +solve -elab
> let rec fib = \n ->
> #       ^^^ int -[fib {}]-> int
>   yield;
>   if n < 2
>   then n
>   else (fib (n - 1)) + (fib (n - 2))
> in
> 
> let rec exec = \state ->
> #       ^^^^ {Fiber int; int; int}
> #       ^^^^   -[exec {}]-> {Fiber int; int; int}
>   stat state.0
> #      ^^^^^ {Fiber int; int; int}
>   | `Pending ->
>     let fib1 = resume state.0 in
> #                     ^^^^^^^ Fiber int
>     exec {fib1, 0, state.2 + 1}
>   | `Done n -> {state.0, n, state.2}
> 
> in
> let runFib = spawn (fib 20) in
> let result = exec {runFib, 0, 0} in
> #   ^^^^^^ {Fiber int; int; int}
> {result.1, result.2}
> 

> +ir -print
> exec: {
> % Stack relative to frame pointer:
> %   -14  #return.2
> %   -13  #return.1
> %   -12  #return.0.stkdirty
> %   -11  #return.0.stkidx
> %   -10  #return.0.return
> %    -9  #return.0.bit
> %    -8  state.2
> %    -7  state.1
> %    -6  state.0.stkdirty
> %    -5  state.0.stkidx
> %    -4  state.0.return
> %    -3  state.0.bit
> %    -2  @old_pc
> %    -1  @old_fp
> %     0  n1
> %     1  fib1.stkdirty
> %     2  fib1.stkidx
> %     3  fib1.return
> %     4  fib1.bit
> exec:
>   sp-add 5
> start2:
>   push fp[-6]
>   push fp[-5]
>   push fp[-4]
>   push fp[-3]
>   jmpz pending
> done:
>   store-into fp[0]
>   sp-sub 2
>   push fp[-8]
>   store-into fp[-14]
>   push fp[0]
>   store-into fp[-13]
>   push fp[-6]
>   push fp[-5]
>   push fp[-4]
>   push fp[-3]
>   store-into fp[-9]
>   store-into fp[-10]
>   store-into fp[-11]
>   store-into fp[-12]
>   ret
> pending:
>   sp-sub 3
>   push fp[-6]
>   push fp[-5]
>   push fp[-4]
>   push fp[-3]
>   resume 1
>   store-into fp[4]
>   store-into fp[3]
>   store-into fp[2]
>   store-into fp[1]
>   push 1
>   push fp[-8]
>   add
>   store-into fp[-8]
>   push 0
>   store-into fp[-7]
>   push fp[1]
>   push fp[2]
>   push fp[3]
>   push fp[4]
>   store-into fp[-3]
>   store-into fp[-4]
>   store-into fp[-5]
>   store-into fp[-6]
>   sp-restore-fp
>   jmp exec
> }
> 
> fib: {
> % Stack relative to frame pointer:
> %   -4  #return
> %   -3  n
> %   -2  @old_pc
> %   -1  @old_fp
> fib:
>   yield
>   push 2
>   push fp[-3]
>   <
>   jmpz else
> then:
>   push fp[-3]
>   store-into fp[-4]
>   ret
> else:
>   sp-add 1
>   push 2
>   push fp[-3]
>   sub
>   call fib
>   sp-sub 1
>   sp-add 1
>   push 1
>   push fp[-3]
>   sub
>   call fib
>   sp-sub 1
>   add
>   store-into fp[-4]
>   ret
> }
> 
> spawn_wrapper: {
> % Stack relative to frame pointer:
> %   -3  #return
> %   -2  @old_pc
> %   -1  @old_fp
> spawn_wrapper:
>   sp-add 1
>   push 20
>   call fib
>   sp-sub 1
>   store-into fp[-3]
>   ret
> }
> 
> @main: {
> % Stack relative to frame pointer:
> %   -4  #return.1
> %   -3  #return.0
> %   -2  @old_pc
> %   -1  @old_fp
> %    0  runFib.stkdirty
> %    1  runFib.stkidx
> %    2  runFib.return
> %    3  runFib.bit
> %    4  result.2
> %    5  result.1
> %    6  result.0.stkdirty
> %    7  result.0.stkidx
> %    8  result.0.return
> %    9  result.0.bit
> @main:
>   sp-add 10
> start:
>   spawn spawn_wrapper 0 1
>   store-into fp[3]
>   store-into fp[2]
>   store-into fp[1]
>   store-into fp[0]
>   sp-add 6
>   push 0
>   push 0
>   push fp[0]
>   push fp[1]
>   push fp[2]
>   push fp[3]
>   call exec
>   sp-sub 6
>   store-into fp[9]
>   store-into fp[8]
>   store-into fp[7]
>   store-into fp[6]
>   store-into fp[5]
>   store-into fp[4]
>   push fp[4]
>   store-into fp[-4]
>   push fp[5]
>   store-into fp[-3]
>   ret
> }

> +eval -print
> {6765, 21891}