{"version":3,"file":"component---src-pages-playground-ho-21-tsx-246b9e647564b2bc4197.js","mappings":"sNASA,MAAMA,EAAW,CACfC,QAAU,0JAQVC,QAGIC,EAEF,CACFC,MAAO,CACL,CACEC,MAAO,aACPC,IAAIC,EAAAA,EAAAA,IAAUC,EAAKC,OACnBC,QAAS,CACP,CAAC,qBAAqB,GACtB,CAAC,oBAAoB,IAEvBC,eAAgB,UAKhBC,EAAgD,CACpDC,aAAc,UAEdC,eAAgB,CAAC,IAAK,IAAK,IAAU,KACrCC,QAAS,CAAC,MACVC,WAAY,CAAC,KAAM,KAAM,KAAM,IAAK,IAAU,IAAU,KACxDC,UAAW,CAAC,IAAK,IAAK,KAAM,IAAU,IAAU,KAChDC,QAAS,yEAETC,UAAW,CACTC,KAAM,CACJ,CAAC,mBAAoB,SACrB,CAAC,kBAAmB,SACpB,CAAC,yBAA0B,mBAC3B,CAAEC,QAAS,eACX,CAAC,OAAQ,aACT,CACE,WACA,CACEC,MAAO,CACL,kBAAmB,UACnB,WAAY,aACZ,cAAe,UACf,aAAc,eAKtBC,WAAY,CACV,CAAC,cAAe,cAChB,CAAC,aAAc,SACf,CAAC,UAAW,WACZ,CAAC,UAAW,iBAKZC,EAAkB,CACtB,CAAEC,QAAS,CAAC,IAAK,KAAMC,KAAM,IAAKC,KAAM,kBAAmBC,QAAQ,GACnE,CAAEH,QAAS,CAAC,IAAK,KAAMC,KAAM,IAAKC,KAAM,eAAgBC,QAAQ,GAChE,CACEH,QAAS,CAAC,IAAK,KACfC,KAAM,WACNC,KAAM,uBACNC,QAAQ,GAEV,CAAEH,QAAS,CAAC,IAAK,KAAMC,KAAM,WAAYC,KAAM,eAAgBC,QAAQ,GACvE,CACEH,QAAS,CAAC,KAAM,KAChBC,KAAM,WACNC,KAAM,2BACNC,QAAQ,GAEV,CACEH,QAAS,CAAC,MACVC,KAAM,QACNC,KAAM,uGACNC,QAAQ,GAEV,CACEH,QAAS,CAAC,KAAM,KAChBC,KAAM,YACNC,KAAM,yCACNE,YAAY,GAEd,CACEJ,QAAS,CAAC,KAAM,KAChBC,KAAM,YACNC,KAAM,2CACNE,YAAY,GAEd,CACEJ,QAAS,CAAC,KAAM,KAChBC,KAAM,YACNC,KAAM,0CACNE,YAAY,GAEd,CACEJ,QAAS,CAAC,KACVC,KAAM,YACNC,KAAM,6CACNE,YAAY,IAsBhB,MAAMC,EAAUC,EAAAA,cAACC,EAAAA,EAAa,CAACC,SAlB/B,WACE,MACMC,EADaV,EAAgBW,QAAQC,IAAQA,EAAGP,aAC1BQ,KAAIC,IAA+B,IAA9B,QAAEb,EAAO,KAAEE,EAAI,OAAEC,GAAQU,EAOxD,MAAQ,KANSb,EACdY,KAAKE,GAEI,KADQX,EAAU,IAAGW,KAAWA,QAGzCC,KAAK,SACiBb,GAAM,IAMjC,OAJAO,EAASO,KACN,kGAGK,GADSP,EAASM,KAAK,8GAEjC,CAEyCE,KA4DzC,MAAMC,EAAkD,CACtDnC,KAAM,CACJoC,OAAQhC,EACRiC,OC9KCC,ED8K0B,OC7K1BC,EDgHL,SAA6BC,GAC3B,IAAK,MAAM,QAAEvB,EAAO,KAAEE,KAAUH,EAC9B,IAAK,MAAMe,KAASd,EAClB,GAAIuB,IAAST,EAAO,CAClB,MAAMU,EAAU,CAEd,CAAEC,MAAOvB,IAKX,OAHIF,EAAQ0B,OAAS,GACnBF,EAAQR,KAAK,CAAES,MAAQ,cAAazB,EAAQe,KAAK,UAE5CS,CACT,CAGJ,OAAID,EAAK,KAAOA,EAAK,GAAGI,eAAiBJ,EAAK,KAAOA,EAAK,GAAGK,cACpD,CAAC,CAAEH,MAAO,iBAAmB,CAAEA,MAAQ,oBAAmBF,QAE5D,IACT,EClISM,GACG,CAACC,EAA6BC,IA9B1C,SACIF,EACAR,EACAC,EACAQ,EACAC,GAEA,MAAOC,WAAYC,EAAI,OAAEC,GAAUH,EAC7BI,EAAYL,EAAMM,iBAAiBH,GACnCR,EAAQK,EAAMO,gBAChB,IAAIR,EAAES,MAAML,EAAMH,EAAMS,iBAAiBN,GAAOA,EAAME,IACpDK,EAASX,EAAEY,OAAOC,SAASZ,EAAMa,WAAYtB,GAAMY,EAAO,GAEhE,IAAK,IAAIW,EAAI,EAAGA,EAAIJ,EAAOd,SAAUkB,EAAG,CACpC,MAAMC,EAAQL,EAAOI,GAAGE,OAAS,EAC3BC,EAAMP,EAAOI,EAAI,GAAKJ,EAAOI,EAAI,GAAGE,OAAS,EAAIX,EACvD,GAAID,GAAUW,GAASX,EAASa,EAAK,CACjC,MAAMxB,EAAOE,EAAMuB,UAAUH,EAAQ,EAAGE,EAAM,GACxCE,EAAQ,IAAIpB,EAAES,MAAML,EAAMY,EAAOZ,EAAMc,GACvCG,EAAW5B,EAAgBC,GACjC,OAAO2B,GAAY,CAACD,QAAOC,WAC/B,CACJ,CACA,OAAO,IACX,CAOgBC,CAAQtB,EAAGR,EAAMC,EAAiBQ,EAAOC,ID2KrDqB,OAzCJ,SACEtB,GAGA,MAAO,CACL,CACE5B,KAHSnB,EAAKsE,cAAcvB,EAAMa,YAAY,GAI9CM,MAAOnB,EAAMwB,qBAGnB,EAgCIC,WAAY,CACVH,OA/BN,SACEtB,GAGA,MAAO,CACL,CACE5B,KAHSnB,EAAKsE,cAAcvB,EAAMa,YAAY,GAI9CM,MAAOnB,EAAMwB,qBAGnB,EAsBME,kBApBN,WACE,MAAMC,EAAM,GASZ,OARAA,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAAS,6BAA6BC,MAAM,MAC/CH,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAAS,6BAA6BC,MAAM,MAC/CH,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAAS,aAAaC,MAAM,MAC/BH,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAAS,OAAOC,MAAM,MACzBH,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAASxE,EAA2B,eAAE4B,KAAK,IAAI6C,MAAM,MACxDH,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAASxE,EAAoB,QAAE4B,KAAK,IAAI6C,MAAM,MACjDH,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAASxE,EAAuB,WAAE4B,KAAK,IAAI6C,MAAM,MACpDH,EAAIzC,KAAI0C,MAARD,GAAGE,EAAAA,EAAAA,GAASxE,EAAsB,UAAE4B,KAAK,IAAI6C,MAAM,MAC5CH,CACT,CASyBI,MClLrBC,IAACzC,EACAC,EDmML,MAbqByC,IACnBzD,EAAAA,cAAC0D,EAAAA,EAAU,CACTpF,MAAM,mCACNqF,SAAS,OACTC,OAAO,mDACP7D,QAASA,EACT8D,sBAAuBjD,EACvBxC,SAAUA,EACV0F,eAAe,QACf7F,SAAUA,EACV8F,eAAe,W","sources":["webpack://www/./src/pages/playground/ho21.tsx","webpack://www/./src/common/hover.ts"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"../../components/playground\";\nimport { createHoverProvider } from \"../../common/hover\";\nimport type { Backend, LanguageRegistration } from \"../../common/types\";\nimport { promisify } from \"../../common/util\";\nimport ReactMarkdown from \"react-markdown\";\nimport * as ho21 from \"ho21\";\n\nconst examples = {\n  Queries: `\n⊥ ?? ⊤\nP∧Q ?? P∨Q\nP∧(Q∨R) ?? (P∧Q)∨(P∧R)∨(P∧Q∧R)\n(A1→A2)∧(B1→B2) ?? A1∧B1→A2∧B2\n(A1→B)∧(A2→B) ?? A1∨A2→B\n(A∨B)∧Int ?? A∨(Int∧B)\nInt ?? Double\n`.trim(),\n};\n\nconst backends: {\n  [K in \"Check\"]: [Backend];\n} = {\n  Check: [\n    {\n      title: \"Judgements\",\n      do: promisify(ho21.judge),\n      options: [\n        [\"Print Derivations\", true],\n        [\"Prettify Symbols\", true],\n      ],\n      editorLanguage: \"ho21\",\n    },\n  ],\n};\n\nconst ho21Syntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  constant_types: [\"!\", \"*\", \"\\u22A4\", \"\\u22A5\"],\n  queries: [\"??\"],\n  judgements: [\"<:\", \":>\", \"~=\", \"#\", \"\\u227A\", \"\\u227B\", \"\\u2245\"],\n  operators: [\"&\", \"|\", \"->\", \"\\u2227\", \"\\u2228\", \"\\u2192\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%#\\u22A4\\u22A5\\u2227\\u2228\\u2192\\u227A\\u227B\\u2245]+/,\n\n  tokenizer: {\n    root: [\n      [/(Syntax error.*)/, \"error\"],\n      [/(Parse error.*)/, \"error\"],\n      [/[A-Z][a-zA-Z0-9_'\\w$]*/, \"type.identifier\"],\n      { include: \"@whitespace\" },\n      [/[()]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@constant_types\": \"keyword\",\n            \"@queries\": \"annotation\",\n            \"@judgements\": \"keyword\",\n            \"@operators\": \"operator\",\n          },\n        },\n      ],\n    ],\n    whitespace: [\n      [/(\\uFF5C.*$)/, \"annotation\"],\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(--.*$)/, \"comment\"],\n      [/(\\\\.*$)/, \"annotation\"],\n    ],\n  },\n};\n\nconst languageContent = [\n  { aliases: [\"!\", \"⊥\"], kind: \"⊥\", text: \"The bottom type\", binary: false },\n  { aliases: [\"*\", \"⊤\"], kind: \"⊤\", text: \"The top type\", binary: false },\n  {\n    aliases: [\"&\", \"∧\"],\n    kind: \"Operator\",\n    text: \"An intersection type\",\n    binary: true,\n  },\n  { aliases: [\"|\", \"∨\"], kind: \"Operator\", text: \"A union type\", binary: true },\n  {\n    aliases: [\"->\", \"→\"],\n    kind: \"Operator\",\n    text: \"An arrow (function) type\",\n    binary: true,\n  },\n  {\n    aliases: [\"??\"],\n    kind: \"Query\",\n    text: \"A judgement query for the relationship between A and B, which will be answered in the output editor.\",\n    binary: true,\n  },\n  {\n    aliases: [\"<:\", \"≺\"],\n    kind: \"Judgement\",\n    text: \"`S <: T` means `S` is a subtype of `T`\",\n    outputOnly: true,\n  },\n  {\n    aliases: [\":>\", \"≻\"],\n    kind: \"Judgement\",\n    text: \"`T :> S` means `T` is a supertype of `S`\",\n    outputOnly: true,\n  },\n  {\n    aliases: [\"~=\", \"≅\"],\n    kind: \"Judgement\",\n    text: \"`T ~= S` means `T` is isomorphic to `S`\",\n    outputOnly: true,\n  },\n  {\n    aliases: [\"#\"],\n    kind: \"Judgement\",\n    text: \"`T # U` means `T` and `U` are incomparable\",\n    outputOnly: true,\n  },\n];\n\nfunction getLanguageGrammarInfo() {\n  const inputItems = languageContent.filter((lc) => !lc.outputOnly);\n  const itemDocs = inputItems.map(({ aliases, text, binary }) => {\n    const examples = aliases\n      .map((alias) => {\n        const example = binary ? `A${alias}B` : alias;\n        return `\\`${example}\\``;\n      })\n      .join(\"/\");\n    return `- ${examples}: ${text}`;\n  });\n  itemDocs.push(\n    `- Other types: Identifiers beginning with an uppercase letter are treated as primitive types.j`\n  );\n  const listDocs = itemDocs.join(\"\\n\");\n  return `${listDocs}\\n[Full Parser Specification](https://github.com/ayazhafiz/plts/blob/base/huang_oliveira_21/parser.mly)`;\n}\n\nconst grammar = <ReactMarkdown children={getLanguageGrammarInfo()} />;\n\nfunction ho21GetHoverContent(word: string) {\n  for (const { aliases, text } of languageContent) {\n    for (const alias of aliases) {\n      if (word === alias) {\n        const content = [\n          // {value: `**${kind}**`},\n          { value: text },\n        ];\n        if (aliases.length > 1) {\n          content.push({ value: `*Aliases*: ${aliases.join(\", \")}` });\n        }\n        return content;\n      }\n    }\n  }\n  if (word[0] === word[0].toUpperCase() && word[0] !== word[0].toLowerCase()) {\n    return [{ value: \"**Primitive**\" }, { value: `Type primitive \\`${word}\\`` }];\n  }\n  return null;\n}\n\nfunction ho21FormatQueries(\n  model: monaco.editor.IModel\n): monaco.languages.ProviderResult<monaco.languages.TextEdit[]> {\n  const text = ho21.formatQueries(model.getValue(), true);\n  return [\n    {\n      text,\n      range: model.getFullModelRange(),\n    },\n  ];\n}\n\nfunction ho21OnTypeFormatQueries(\n  model: monaco.editor.IModel\n): monaco.languages.ProviderResult<monaco.languages.TextEdit[]> {\n  const text = ho21.formatQueries(model.getValue(), true);\n  return [\n    {\n      text,\n      range: model.getFullModelRange(),\n    },\n  ];\n}\n\nfunction getHo21AutoFormatCharacters() {\n  const all = [];\n  all.push(...\"abcdefghijklmnopqrstuvwxyz\".split(\"\"));\n  all.push(...\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\"));\n  all.push(...\"0123456789\".split(\"\"));\n  all.push(...\"()_'\".split(\"\"));\n  all.push(...ho21Syntax[\"constant_types\"].join(\"\").split(\"\"));\n  all.push(...ho21Syntax[\"queries\"].join(\"\").split(\"\"));\n  all.push(...ho21Syntax[\"judgements\"].join(\"\").split(\"\"));\n  all.push(...ho21Syntax[\"operators\"].join(\"\").split(\"\"));\n  return all;\n}\n\nconst languages: Record<string, LanguageRegistration> = {\n  ho21: {\n    syntax: ho21Syntax,\n    hover: createHoverProvider(\"ho21\", ho21GetHoverContent),\n    format: ho21FormatQueries,\n    autoFormat: {\n      format: ho21OnTypeFormatQueries,\n      triggerCharacters: getHo21AutoFormatCharacters(),\n    },\n  },\n};\n\nconst FtPlayground = () => (\n  <Playground\n    title=\"Huang-Oliveira (2021) Playground\"\n    language=\"ho21\"\n    source=\"https://github.com/ayazhafiz/plts/tree/base/ho21\"\n    grammar={grammar}\n    languageRegistrations={languages}\n    backends={backends}\n    defaultBackend=\"Check\"\n    examples={examples}\n    defaultExample=\"Queries\"\n  />\n);\nexport default FtPlayground;\n","import type * as monaco from 'monaco-editor';\n\nfunction doHover(\n    m: typeof monaco,\n    lang: string,\n    contentProvider: (item: string) => (monaco.IMarkdownString[] | null),\n    model: monaco.editor.IModel,\n    position: monaco.Position,\n    ): monaco.languages.ProviderResult<monaco.languages.Hover> {\n    const {lineNumber: line, column} = position;\n    const maxColumn = model.getLineMaxColumn(line);\n    const value = model.getValueInRange(\n        new m.Range(line, model.getLineMinColumn(line), line, maxColumn));\n    const tokens = m.editor.tokenize(model.getValue(), lang)[line - 1];\n\n    for (let i = 0; i < tokens.length; ++i) {\n        const start = tokens[i].offset + 1;\n        const end = tokens[i + 1] ? tokens[i + 1].offset + 1 : maxColumn;\n        if (column >= start && column < end) {\n            const word = value.substring(start - 1, end - 1);\n            const range = new m.Range(line, start, line, end);\n            const contents = contentProvider(word);\n            return contents && {range, contents};\n        }\n    }\n    return null;\n}\n\nexport const createHoverProvider =\n    (lang: string,\n     contentProvider: (item: string) => (monaco.IMarkdownString[] | null)) =>\n        (m: typeof monaco) =>\n            (model: monaco.editor.IModel, position: monaco.Position) =>\n                doHover(m, lang, contentProvider, model, position);\n"],"names":["examples","Queries","trim","backends","Check","title","do","promisify","ho21","judge","options","editorLanguage","ho21Syntax","defaultToken","constant_types","queries","judgements","operators","symbols","tokenizer","root","include","cases","whitespace","languageContent","aliases","kind","text","binary","outputOnly","grammar","React","ReactMarkdown","children","itemDocs","filter","lc","map","_ref","alias","join","push","getLanguageGrammarInfo","languages","syntax","hover","lang","contentProvider","word","content","value","length","toUpperCase","toLowerCase","m","model","position","lineNumber","line","column","maxColumn","getLineMaxColumn","getValueInRange","Range","getLineMinColumn","tokens","editor","tokenize","getValue","i","start","offset","end","substring","range","contents","doHover","format","formatQueries","getFullModelRange","autoFormat","triggerCharacters","all","apply","_toConsumableArray","split","getHo21AutoFormatCharacters","createHoverProvider","FtPlayground","Playground","language","source","languageRegistrations","defaultBackend","defaultExample"],"sourceRoot":""}