{"version":3,"file":"component---src-pages-playground-cor-refine-tsx-ccd7766203833b5aa8c2.js","mappings":"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","sources":["webpack://www/./src/components/cor.tsx","webpack://www/./src/pages/playground/cor/refine.tsx","webpack://www/../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport Playground from \"./playground\";\nimport type {\n  Backend,\n  LanguageRegistration,\n  StringOptions,\n} from \"../common/types\";\nimport { shapeBackend } from \"../common/util\";\nimport * as cor from \"cor\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction getBackends(\n  lang: string,\n  defaultEmit: string\n): Record<string, [Backend]> {\n  const backends: Record<string, [Backend]> = {};\n  for (const phase of cor.phases) {\n    let doit = (prog: string, emit: string) =>\n      cor.compile(prog, lang, phase, emit);\n    let options: [[string, StringOptions]] = [\n      [\"emit\", { value: defaultEmit, options: cor.emits }],\n    ];\n    let backend: Backend = {\n      title: phase,\n      editorLanguage: lang,\n      ...shapeBackend(doit, options),\n    };\n    backends[phase] = [backend];\n  }\n  return backends;\n}\n\nfunction createHover(lang: string): LanguageRegistration[\"hover\"] {\n  return (m: typeof monaco) =>\n    (model: monaco.editor.ITextModel, pos: monaco.Position) => {\n      const program = model.getValue();\n      const hover = cor.hover(program, lang, pos.lineNumber, pos.column);\n      const {\n        info,\n        range: { start, fin },\n      } = hover;\n      return {\n        range: new m.Range(start.line, start.col, fin.line, fin.col),\n        contents: info.map((value) => {\n          return { value };\n        }),\n      };\n    };\n}\n\nconst CorPlayground: React.FC<{\n  experiment: string;\n  defaultPhase: string;\n  defaultEmit: string;\n  languageRegistrations?: Record<string, LanguageRegistration>;\n}> = ({\n  experiment,\n  defaultPhase,\n  defaultEmit,\n  languageRegistrations = {},\n}) => {\n  if (languageRegistrations[experiment]) {\n    languageRegistrations[experiment].hover = createHover(experiment);\n  }\n\n  const allExamples = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"roc\" } }) {\n        nodes {\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `);\n\n  const examples: Record<string, string> = {};\n  for (const file of allExamples.allFile.nodes) {\n    if (file.relativePath.includes(`/${experiment}/`)) {\n      const exampleName = file.relativePath.split(\"/\").at(-1).split(\".roc\")[0];\n      const [content, setContent] = React.useState(\"\");\n      const base = process.env[\"HOST\"];\n      console.log(\"getting\", base, file.publicURL);\n      fetch(new URL(file.publicURL, base))\n        .then((r) => r.text())\n        .then((s) => {\n          return cor.userProgram(s);\n        })\n        .then(setContent);\n      examples[exampleName] = content;\n    }\n  }\n\n  return (\n    <Playground\n      title={`cor/${experiment} Playground`}\n      language={experiment}\n      source={`https://github.com/ayazhafiz/cor/tree/base/experiments/${experiment}`}\n      grammar={`https://github.com/ayazhafiz/cor/blob/base/experiments/${experiment}/parser.mly`}\n      languageRegistrations={languageRegistrations}\n      backends={getBackends(experiment, defaultEmit)}\n      defaultBackend={defaultPhase}\n      examples={examples}\n      defaultExample={Object.keys(examples)[0]}\n    />\n  );\n};\n\nexport default CorPlayground;\n","import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport { LanguageRegistration } from \"../../../common/types\";\nimport CorPlayground from \"../../../components/cor\";\n\nconst refine = \"refine\";\n\nconst refineSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  keywords: [\"let\", \"in\", \"when\", \"is\", \"as\"],\n  symbols: /[,_\\{\\}\\|<>\\\\?\\->.=!;\\[\\]+]|(->)/,\n  lower: /[a-z][a-zA-Z0-9_'\\w$]*/,\n\n  tokenizer: {\n    root: [\n      [/(.*error.*)/, \"error\"],\n      [\n        /@lower/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/[A-Z][a-zA-Z0-9_'\\w$]*/, \"constructor\"],\n      { include: \"@whitespace\" },\n      [/[()]/, \"@brackets\"],\n      [/`\\d+/, \"tag\"],\n      [/~\\d+/, \"tag\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n      [/:\\s*/, \"operator\", \"@type\"],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/#\\s*[\\^]+$/, \"comment\"],\n      [/#\\s*([\\^]+\\s*)+$/, \"comment\"],\n      [/#\\s*[\\^]+/, \"comment\", \"@type\"],\n      [/#.*$/, \"comment\"],\n    ],\n    type: [\n      [/\\]$/, \"keyword.type\", \"@popall\"],\n      [/\\]/, \"keyword.type\", \"@popall\"],\n      [/\\[/, \"keyword.type\"],\n      [/,/, \"keyword.type\"],\n      [/([`?]\\d+)$/, \"tag\", \"@popall\"],\n      [/([`?]\\d+)/, \"tag\"],\n      [/[a-zA-Z][a-zA-Z0-9_']*$/, \"type\", \"@popall\"],\n      [/[a-zA-Z][a-zA-Z0-9_']*/, \"type\"],\n      [/[ \\t]*$/, \"@whitespace\", \"@popall\"],\n      [/[ \\t]+/, \"@whitespace\"],\n    ],\n  },\n};\n\nconst languageRegistrations: Record<typeof refine, LanguageRegistration> = {\n  [refine]: {\n    syntax: refineSyntax,\n  },\n};\n\nconst RefinePlayground: React.FC<{}> = ({}) =>\n  CorPlayground({\n    experiment: refine,\n    defaultPhase: \"solve\",\n    defaultEmit: \"elab\",\n    languageRegistrations,\n  });\n\nexport default RefinePlayground;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["getBackends","backends","phase","options","value","cor","backend","title","editorLanguage","lang","shapeBackend","prog","experiment","defaultPhase","defaultEmit","languageRegistrations","program","model","hover","pos","info","start","fin","range","m","contents","examples","useStaticQuery","allExamples","file","exampleName","React","content","setContent","base","process","console","fetch","URL","r","language","source","grammar","defaultBackend","defaultExample","Object","refine","syntax","defaultToken","keywords","symbols","lower","tokenizer","root","cases","include","whitespace","type","CorPlayground","_objectDestructuringEmpty","obj","TypeError"],"sourceRoot":""}