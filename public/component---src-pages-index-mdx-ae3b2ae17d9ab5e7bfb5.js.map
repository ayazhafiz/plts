{"version":3,"file":"component---src-pages-index-mdx-ae3b2ae17d9ab5e7bfb5.js","mappings":"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","sources":["webpack://www/./src/pages/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/hafiz/Code/OCaml/plts/www/src/components/md-wrapper.tsx\";\nimport Revision from \"../components/revision.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`plts `}<Revision mdxType=\"Revision\" /></h1>\n    <p>{`Implementations of type systems and programming languages I find interesting.`}</p>\n    <p>{`Repository: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ayazhafiz/plts\"\n      }}>{`gh:ayazhafiz/plts`}</a>{`.`}</p>\n    <h2>{`Introductory`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://ayazhafiz.com/articles/21/typescript-type-system-lambda-calculus\"\n          }}>{`Emulating the Lambda Calculus in TypeScript's Type System`}</a>{`: Evaluating the lambda calculus entirely using the TypeScript type system.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ayazhafiz/plts/blob/base/tapl\"\n          }}>{`TAPL`}</a>{`: Selected\nimplementations of languages formalized in `}<em parentName=\"p\">{`Types and Programming Languages`}</em>{`\n(Pierce 2002).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://ayazhafiz.com/plts/playground/tiger\"\n          }}>{`Tiger`}</a>{`: A compiler for the Tiger Language of Appel's 1998 `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.cs.princeton.edu/~appel/modern/ml/index.html\"\n          }}>{`Modern\nCompiler Implementation`}</a>{`.`}</p>\n      </li>\n    </ul>\n    <h2>{`Roc`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ayazhafiz/cor\"\n      }}>{`cor`}</a>{` is a minimalization of\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://roc-lang.org\"\n      }}>{`Roc`}</a>{` used for experimenting on the language and its\ncompiler.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ayazhafiz/cor/tree/base/experiments/uls\"\n          }}>{`cor/uls`}</a>{`: A\nlanguage with \"unspecialized lambda sets\", a novel extension of the\nHindley-Milner type system that supports efficient resolution of ad-hoc\npolymorphic usages (a-la typeclasses) during unification.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://www.notion.so/rwx/Non-linear-monomorphization-0b26991a028949a285ca77a8ffcff3c5#1930c4eadf08465f9c7b96469f11f664\"\n            }}>{`Documentation`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/plts/playground/cor/uls\"\n            }}>{`Playground`}</a></li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Flow Typing`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://ayazhafiz.com/lang_narrow\"\n          }}>{`lang_narrow`}</a>{`: A language with unions,\nrecords, and flow typing. A checker, interpreter, and C code generator is\nimplemented.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/lang_narrow\"\n            }}>{`Playground`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/articles/21/lang-narrow\"\n            }}>{`Blog post`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://ayazhafiz.com/plts/playground/ft\"\n          }}>{`FT`}</a>{`: The FT (flow typing) calculus from David\nPearce's 2012 paper `}<a parentName=\"p\" {...{\n            \"href\": \"https://ecs.wgtn.ac.nz/foswiki/pub/Main/TechnicalReportSeries/ECSTR12-20.pdf\"\n          }}><em parentName=\"a\">{`Sound and Complete Flow Typing with Unions,\nIntersections, and Negations`}</em></a>{`.\nLike `}<inlineCode parentName=\"p\">{`lang_narrow`}</inlineCode>{`, but smaller and proven sound and complete. Includes a\nself-designed type inferer guaranteed to infer principal types.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/plts/playground/ft\"\n            }}>{`Playground`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ecs.wgtn.ac.nz/foswiki/pub/Main/TechnicalReportSeries/ECSTR12-20.pdf\"\n            }}>{`Pearce, 2012`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/articles/21/type-inference-for-flow-typing\"\n            }}>{`Blog post`}</a>{`: type inference for the calculus`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Gradual Typing`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://ayazhafiz.com/plts/playground/gtlc\"\n          }}>{`gtlc`}</a>{`: A compiler for the gradually-typed lambda calculus,\nemploying the type consistency relation of `}<a parentName=\"p\" {...{\n            \"href\": \"http://www.schemeworkshop.org/2006/13-siek.pdf\"\n          }}>{`Siek and Taha`}</a>{` (2006).\nThe GTLC allows a developer to omit type annotations during development at\nthe expense of run-time type casts. While the ahead-of-time typechecker will\ncatch any non-sensical type errors, the runtime system will catch any cast\nerrors.`}</p>\n        <p parentName=\"li\">{`The compiler is multi-phase, optimizing, includes an interpretive mode and a\ntype inferer, and provides code generators to C and TypeScript.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/plts/playground/gtlc\"\n            }}>{`Playground`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"http://www.schemeworkshop.org/2006/13-siek.pdf\"\n            }}>{`Siek and Taha, 2006`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.84.4703&rep=rep1&type=pdf\"\n            }}>{`Type Inference for Gradual Typing (Siek and Vachharajani, 2008)`}</a></li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Typed Assembly`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://ayazhafiz.com/plts/playground/tal\"\n        }}>{`TAL`}</a>{`: A compiler from a System F-like language to the\nTyped Assembly Language of `}<a parentName=\"li\" {...{\n          \"href\": \"https://dash.harvard.edu/handle/1/2797451\"\n        }}>{`Morrisett, et.al. 1998`}</a>{`.\nAlso includes a compiler to x86 assembly using `}<a parentName=\"li\" {...{\n          \"href\": \"http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf\"\n        }}>{`Linear Scan Register\nAllocation`}</a>{`\n(Poletto & Sarkar 1999).`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/plts/playground/tal\"\n            }}>{`Playground`}</a></li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Subtyping`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://ayazhafiz.com/plts/playground/ho21\"\n          }}>{`HO21`}</a>{`: An implementation of the\nalgorithmic duotyping calculus invented by Huang and Oliveira in\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://dl.acm.org/doi/pdf/10.1145/3473594\"\n          }}>{`Distributing Intersection and Union Types with Splits and Duality`}</a>{` (2021).\nThe calculus includes union, intersection, and arrow types in the presence\nof non-trivial distributivity rules. The authors' duotyping algorithm is\nsomewhat novel in that it computes subtyping relationship entirely on\nsurface types of the language, without normalizing to a form like DNF.\nThis implementation includes a type-derivation tree generator.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://ayazhafiz.com/plts/playground/ho21\"\n            }}>{`Playground`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://dl.acm.org/doi/pdf/10.1145/3473594\"\n            }}>{`Huang and Oliveira, 2021`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ayazhafiz/plts/blob/base/simple_sub\"\n          }}>{`simple_sub`}</a>{`: A type system\nthat supports type inference in the presence of subtyping and polymorphism, as\ndescribed by Parreaux's `}<em parentName=\"p\"><a parentName=\"em\" {...{\n              \"href\": \"https://lptk.github.io/files/%5Bv1.8%5D%20simple-essence-algebraic-subtyping.pdf\"\n            }}>{`The Simple Essence of Algebraic Subtyping`}</a></em>{` (2020). Parreaux's\nwork distills Dolan's `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.cs.tufts.edu/~nr/cs257/archive/stephen-dolan/thesis.pdf\"\n          }}>{`2017 thesis`}</a>{`\non Algebraic Subtyping into a simpler core.`}</p>\n      </li>\n    </ul>\n    <h2>{`Dependent Types`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ayazhafiz/plts/blob/base/deptypes\"\n          }}>{`deptypes`}</a>{`: A dependent\ntype theory as described in Chapter 2 of Pierce's `}<em parentName=\"p\">{`Advanced Topics in Types\nand Programming Languages`}</em>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ayazhafiz/plts/pull/3\"\n          }}>{`more deptypes`}</a>{`: Additional,\nalternate implementations of the basic dependently-typed lambda calculus.`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}