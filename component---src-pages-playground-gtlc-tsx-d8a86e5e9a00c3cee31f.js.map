{"version":3,"file":"component---src-pages-playground-gtlc-tsx-d8a86e5e9a00c3cee31f.js","mappings":"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","sources":["webpack://www/./src/common/evaluator.ts","webpack://www/./src/pages/playground/gtlc.tsx","webpack://www/../node_modules/typescript/lib/ sync"],"sourcesContent":["import {transpile} from 'typescript';\nimport type {Result} from './types';\n\nexport const C = {\n    title: 'Execution (Clang 12.0.1, -O3)',\n    async eval(input: Result): Promise<Result> {\n        if (input.result === null) return input;\n        const data =\n            await fetch('https://godbolt.org/api/compiler/cclang1201/compile', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json',\n                },\n                body: JSON.stringify({\n                    source: input.result,\n                    options: {\n                        userArguments: '-O3',\n                        compilerOptions: {\n                            executorRequest: true,\n                        },\n                        filters: {\n                            execute: true,\n                        },\n                        tools: [],\n                    },\n                    lang: 'c',\n                    allowStoreCodeDebug: true,\n                }),\n            }).then((response) => response.json());\n        if (data.code === -1) {\n            return {\n                result: null,\n                error: `Unexpected compilation error:\\n${\n                    JSON.stringify(data.buildResult.stderr)}`,\n            };\n        }\n        return {\n            result: data.stdout[0].text,\n            error: null,\n        };\n    }\n}\n\nexport const TS = {\n    title: 'JS Execution',\n    async eval(input: Result): Promise<Result> {\n        if (input.error) return input;\n        const jsCode = transpile(input.result!);\n        try {\n            const result = await eval(jsCode);\n            return {result: `${result}`, error: null};\n        } catch (e: unknown) {\n            return {result: null, error: (e as EvalError).message};\n        }\n    }\n}\n","import type * as monaco from \"monaco-editor\";\nimport * as React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport Playground from \"../../components/playground\";\nimport type {Backend, LanguageRegistration} from \"../../common/types\";\nimport {C, TS} from \"../../common/evaluator\";\nimport {shapeBackend, shapeBackendP} from \"../../common/util\";\nimport {\n  infer,\n  irCompile,\n  cCompile,\n  tsCompile,\n  doEval,\n  docs,\n  getHover,\n} from \"gtlc\";\n\nconst examples = {\n  \"Cast Error\": `(λx. succ x) #t`,\n  \"Closure Passing\": `\nlet apply1To = λf: ? -> nat. f 1 in\napply1To (λx: nat. succ x)\n`.trim(),\n  \"Large Closures\": `\nlet add8 =\n  \\\\a. \\\\b. \\\\c. \\\\d. \\\\e. \\\\f. \\\\g. \\\\h.\n  add a (add b (add c (add d (add e (add f (add g h)))))) in\nadd8 1 2 3 4 5 6 7 8\n`.trim(),\n  \"Fixpoint Combinator\": `\nlet fix = λf. (λx. f (λy. x x y)) (λx. f (λy. x x y)) in\nlet fib = λn: _.\n  let go' = λgo: _. λi: _. λa: _. λb: _.\n    if eqn i n\n    then a\n    else go (succ i) b (add a b)\n  in\n  let go = fix go' in\n  go 0 0 1\nin\nfib 23\n`.trim(),\n  \"Type Inference\": `\n\\\\f: ((? -> nat) -> (bool -> ?)) -> ((nat -> ?) -> (? -> bool)) -> nat.\n  \\\\y: _.\n    f y y\n`.trim(),\n  References: `\nlet fact_cell: _ = ref (\\\\n: _. 0) in\nfact_cell := \\\\n: _.\n    if eqn n 0\n    then 1\n    else mult n (!fact_cell (pred n));\nlet fact: _ = !fact_cell in\nfact 6\n`.trim(),\n};\n\nconst fmtOptions: [[\"width\", number]] = [[\"width\", 55]];\nconst compileOptions: [[\"optimize\", boolean], [\"width\", number]] = [\n  [\"optimize\", true],\n  ...fmtOptions,\n];\n\nconst backends: {\n  Infer: [Backend];\n} & {\n    [K in \"Compiler IR\" | \"TypeScript\" | \"C\"]: [Backend, Backend];\n  } = {\n  Infer: [\n    {\n      title: \"Infer\",\n      editorLanguage: \"gtlc\",\n      ...shapeBackend(infer, fmtOptions),\n    },\n  ],\n  \"Compiler IR\": [\n    {\n      title: \"Lift IR\",\n      editorLanguage: \"liftIr\",\n      ...shapeBackend(irCompile, compileOptions),\n    },\n    {\n      title: \"Interpreter Execution\",\n      editorLanguage: \"gtlc\",\n      ...shapeBackend(doEval, fmtOptions),\n    },\n  ],\n  TypeScript: [\n    {\n      title: \"TypeScript\",\n      editorLanguage: \"typescript\",\n      ...shapeBackend(tsCompile, compileOptions),\n    },\n    {\n      title: TS.title,\n      editorLanguage: \"javascript\",\n      ...shapeBackendP((input: string, width: number) => {\n        const ts = tsCompile(input, true, width);\n        return TS.eval(ts);\n      }, fmtOptions),\n    },\n  ],\n  C: [\n    {\n      title: \"C\",\n      editorLanguage: \"c\",\n      ...shapeBackend(cCompile, compileOptions),\n    },\n    {\n      title: C.title,\n      editorLanguage: \"c\",\n      ...shapeBackendP((input: string, width: number) => {\n        const c = cCompile(input, true, width);\n        return C.eval(c);\n      }, fmtOptions),\n    },\n  ],\n};\n\nconst builtin_docs = docs;\nconst builtin_fns = builtin_docs.map((d) => d.name);\n\nconst grammar = (\n  <ReactMarkdown>\n    {`\n**Expressions**\n\n- \\`x\\`: variables\n- \\`100\\`: numbers\n- \\`#t|#f\\`: the true and false literals\n- \\`(\\\\|λ)x: t. e\\`: a lambda expression with \\`x\\` bound to type \\`t\\`\n- \\`let x: t = e1 in e2\\`: binds \\`x\\` to \\`e1\\` and then evaluates \\`e2\\`\n- \\`f a\\`: application to a lambda\n- \\`if e1 then e2 else e3\\`: an if-then-else expression\n- \\`ref e\\`: boxes \\`e\\` and returns a reference to it\n- \\`!r\\`: unboxes the value at reference \\`r\\`\n- \\`r := e\\`: places the value of \\`e\\` in the reference \\`r\\`\n\nAll type annotations of form \\`: t\\` are optional. If not specified, the\ntype defaults to the unknown type \\`?\\`. There is also the special type marker\n\\`_\\`, which instructs the compiler to infer a principal type.\n\n**Types**\n\n- \\`?\\`: the unknown type, admitting any value\n- \\`_\\`: mark type to be inferred\n- \\`nat\\`: the type of natural numbers\n- \\`bool\\`: the type of booleans\n- \\`t1 -> t2\\`: function type\n- \\`ref t\\`: a reference type\n\n**Builtin Functions**\n\n${builtin_docs\n        .map(({name, ty, doc}) => {\n          return `- \\`${name}: ${ty}\\`\\n\\t- ${doc}`;\n        })\n        .join(\"\\n\")}\n\n[Full Parser Specification](https://github.com/ayazhafiz/plts/blob/base/gtlc/parser.mly)\n`.trim()}\n  </ReactMarkdown>\n);\n\nconst gtlcSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  builtin_types: [\"nat\", \"bool\", \"?\", \"_\"],\n  keywords: [\"let\", \"in\", \"ref\", \"if\", \"then\", \"else\", \"\\u03BB\", \"\\\\\"].concat(\n    builtin_fns\n  ),\n  symbols: /[_<>\\\\?\\->.:=!;\\u03BB]|(->)/,\n\n  tokenizer: {\n    root: [\n      [/(Syntax error.*)/, \"error\"],\n      [/(Parse error.*)/, \"error\"],\n      [/`\\(/, \"infer\", \"@infer\"],\n      [/`(nat|bool|\\?)/, \"infer\"],\n      [/#[tf]/, \"keyword\"],\n      [\n        /[a-z][a-zA-Z0-9_'\\w$]*/,\n        {\n          cases: {\n            \"@builtin_types\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/\\d+/, \"number\"],\n      {include: \"@whitespace\"},\n      [/[()]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@builtin_types\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    infer: [\n      [/[^()]+/, \"infer\"],\n      [/\\(/, \"infer\", \"@push\"],\n      [/\\)/, \"infer\", \"@pop\"],\n    ],\n    whitespace: [\n      [/(\\uFF5C.*$)/, \"annotation\"],\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(--.*$)/, \"comment\"],\n    ],\n  },\n};\n\nconst liftIrSyntax: monaco.languages.IMonarchLanguage = {\n  defaultToken: \"invalid\",\n\n  builtin_types: [\"nat\", \"bool\", \"?\", \"Clos\"],\n  keywords: [\n    \"fn\",\n    \"decl\",\n    \"apply\",\n    \"pack\",\n    \"let\",\n    \"in\",\n    \"if\",\n    \"then\",\n    \"else\",\n    \"\\u03BB\",\n    \"\\\\\",\n  ].concat(builtin_fns),\n  symbols: /[,;<>\\\\?\\->.:=\\u03BB]+/,\n\n  tokenizer: {\n    root: [\n      [/(Syntax error.*)/, \"error\"],\n      [/(Parse error.*)/, \"error\"],\n      [\n        /[a-zA-Z_'][a-zA-Z_'\\w$]*/,\n        {\n          cases: {\n            \"@builtin_types\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\",\n          },\n        },\n      ],\n      [/\\d+/, \"number\"],\n      {include: \"@whitespace\"},\n      [/[{()}]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@builtin_types\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"operator\",\n          },\n        },\n      ],\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/(--.*$)/, \"comment\"],\n    ],\n  },\n};\n\nconst languages: Record<\"gtlc\" | \"liftIr\", LanguageRegistration> = {\n  gtlc: {\n    syntax: gtlcSyntax,\n    hover:\n      (m: typeof monaco) =>\n        (model: monaco.editor.ITextModel, pos: monaco.Position) => {\n          const program = model.getValue();\n          const hover = getHover(program, pos.lineNumber, pos.column);\n          if (hover === null) return null;\n          const {\n            info,\n            range: {startPos, endPos},\n          } = hover;\n          return {\n            range: new m.Range(\n              startPos.line,\n              startPos.col,\n              endPos.line,\n              endPos.col\n            ),\n            contents: info.map((value) => {\n              return {value};\n            }),\n          };\n        },\n  },\n  liftIr: {\n    syntax: liftIrSyntax,\n  },\n};\n\nconst GtlcPlayground = () => (\n  <Playground\n    title=\"GTLC Playground\"\n    language=\"gtlc\"\n    source=\"https://github.com/ayazhafiz/plts/tree/base/gtlc\"\n    grammar={grammar}\n    languageRegistrations={languages}\n    backends={backends}\n    defaultBackend=\"C\"\n    examples={examples}\n    defaultExample=\"Fixpoint Combinator\"\n  />\n);\nexport default GtlcPlayground;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 13841;\nmodule.exports = webpackEmptyContext;"],"names":["C","title","eval","input","result","data","fetch","method","headers","Accept","body","JSON","stringify","source","options","userArguments","compilerOptions","executorRequest","filters","execute","tools","lang","allowStoreCodeDebug","then","response","json","code","error","buildResult","stderr","stdout","text","TS","jsCode","transpile","e","message","examples","trim","References","fmtOptions","compileOptions","concat","backends","Infer","editorLanguage","shapeBackend","infer","irCompile","doEval","TypeScript","tsCompile","shapeBackendP","width","ts","cCompile","c","builtin_docs","docs","builtin_fns","map","d","name","grammar","React","ReactMarkdown","_ref","ty","doc","join","languages","gtlc","syntax","defaultToken","builtin_types","keywords","symbols","tokenizer","root","cases","include","whitespace","hover","m","model","pos","program","getValue","getHover","lineNumber","column","info","range","startPos","endPos","Range","line","col","contents","value","liftIr","GtlcPlayground","Playground","language","languageRegistrations","defaultBackend","defaultExample","webpackEmptyContext","req","Error","keys","resolve","id","module","exports"],"sourceRoot":""}